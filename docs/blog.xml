<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deepamminda</title>
<link>https://www.deepamminda.com/blog.html</link>
<atom:link href="https://www.deepamminda.com/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.53</generator>
<lastBuildDate>Mon, 29 Jul 2024 18:30:00 GMT</lastBuildDate>
<item>
  <title>So you know convolutions huh?</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://www.deepamminda.com/posts/cnns/00_cnn_basics.html</link>
  <description><![CDATA[ 





<p>Welcome to the land of vision in deep learning. Gone are the days you need to look at 10 types of thresholding and 20 types of data pre-processing and apply a logistic classifier on the outputs of a cnn feature extractor. These days you can just load a pretrained model and watch a decaying training and validation loss and feel good about yourself.</p>
<p>Turns out, this doesnt last long though. You eventually get around to understand what these models actually are because you need to! And when it comes to vision, you surely cannot leave out CNNs. Sure its all transformers nowadays but CNNs or convolutional neural networks were essentially the first deep learning models to make a significant impact in the field of computer vision and most would agree started the whole deep learning wave in the modern era. AlexNet, VGG, resnets would be considered the pioneer models in this field.</p>
<p>Now you might ask: All this sounds interesting Deepam, but what the hell is a convolution?</p>
<section id="convolutions" class="level2">
<h2 class="anchored" data-anchor-id="convolutions">Convolutions</h2>
<p>Convolutions is just an operation between 2 signals (vectors/matrices/continuous-signals) that returns a 3rd signal. It represents how one signal modifies the other signal. In general terms, convolution is used to apply a filter to a signal or data.</p>
</section>
<section id="steps-in-convolution" class="level2">
<h2 class="anchored" data-anchor-id="steps-in-convolution">Steps in Convolution</h2>
<ol type="1">
<li><strong>Flip the Kernel</strong>: The kernel (or filter) <img src="https://latex.codecogs.com/png.latex?(g)"> is flipped both horizontally and vertically. why?-&gt; <a href="https://dsp.stackexchange.com/questions/5992/flipping-the-impulse-response-in-convolution/6355#6355">link</a></li>
<li><strong>Slide the Kernel</strong>: The flipped kernel is then slid (convolved) over the input function <img src="https://latex.codecogs.com/png.latex?(f)"> .</li>
<li><strong>Element-wise Multiplication</strong>: At each position, element-wise multiplications are performed between the kernel and the overlapping portion of the input function.</li>
<li><strong>Summation</strong>: The results of these multiplications are summed to get a single value, which is placed in the output function.</li>
</ol>
<p>For a 1d array this might look like this:</p>
<div id="cell-3" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span>
<span id="cb1-2"></span>
<span id="cb1-3">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb1-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"f: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"g: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-8">window_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-9">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">slice_of_f * g[::-1]: "</span>)</span>
<span id="cb1-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(f)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)):</span>
<span id="cb1-12">    slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>window_size]</span>
<span id="cb1-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. sum(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slice_of_f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> * </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) = sum(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> g[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> g[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-14">    result.append(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> g[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">result python: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"result using np.convolve: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>convolve(f,g, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># valid is the no padding</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>f: [ 1  2  3 -1 10 -4]
g: [ 1  0 -1]

slice_of_f * g[::-1]: 
0. sum([1 2 3] * [-1  0  1]) = sum([-1  0  3]) = 2
1. sum([ 2  3 -1] * [-1  0  1]) = sum([-2  0 -1]) = -3
2. sum([ 3 -1 10] * [-1  0  1]) = sum([-3  0 10]) = 7
3. sum([-1 10 -4] * [-1  0  1]) = sum([ 1  0 -4]) = -3

result python: [2, -3, 7, -3]
result using np.convolve: [ 2 -3  7 -3]</code></pre>
</div>
</div>
<p>That wasnt so hard was it? The concept seems simple enough. slide one signal over another and each time, do element wise multiplication and sum to get a value.</p>
<p>Lets look at an example for 2d arrays. Here lets take 2 arrays of shapes (6,6) and (3,3). First we need to flip the 2nd array both horizontally and vertically. Then, as the (3,3) array slides over the other we should get a (4,4) matrix. Lets see how this works.</p>
<div id="cell-5" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.signal <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> convolve2d</span>
<span id="cb3-2"></span>
<span id="cb3-3">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb3-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"f shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"g shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"result: {np.convolve(f,g, mode='valid')}")</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>f shape: (6, 6)
g shape: (3, 3)</code></pre>
</div>
</div>
<div id="cell-6" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">f_rows, f_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.shape </span>
<span id="cb5-2">g_rows, g_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g.shape</span>
<span id="cb5-3"></span>
<span id="cb5-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((f_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, f_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(f_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(f_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-7">        item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>g_rows, j:j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>g_columns] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> g[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"result[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-&gt;sum(f[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>g_rows<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>g_columns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] * g[::-1, ::-1]): </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-10">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"-&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(item)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-11">        result[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(item)</span>
<span id="cb5-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"... and so on.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"final result: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"result shape: {result.shape}")</span></span>
<span id="cb5-15"></span>
<span id="cb5-16">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convolve2d(f,g, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>)</span>
<span id="cb5-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Which is the same as the result of scipy.convolve2d: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>result[0,0] 
-&gt;sum(f[0:3, 0:3] * g[::-1, ::-1]): 
[[-0.50043879  0.          0.96533241]
 [-0.57575706  0.          0.96608904]
 [-0.26910721  0.          0.02162452]]
-&gt; 0.6077429029172687

result[1,0] 
-&gt;sum(f[1:4, 0:3] * g[::-1, ::-1]): 
[[-0.57575706  0.          0.96608904]
 [-0.26910721  0.          0.02162452]
 [-0.16668093  0.          0.3390268 ]]
-&gt; 0.3151951622196356

result[2,0] 
-&gt;sum(f[2:5, 0:3] * g[::-1, ::-1]): 
[[-0.26910721  0.          0.02162452]
 [-0.16668093  0.          0.3390268 ]
 [-0.61184461  0.          0.5508951 ]]
-&gt; -0.1360863354721753

... and so on.

final result: 
[[ 0.6077429  -0.14661592  0.29036408  0.19567047]
 [ 0.31519516 -0.07866619  0.52920251 -0.44948681]
 [-0.13608634 -0.90171287  0.94176527 -0.91012219]
 [ 0.69872346 -0.43798077 -0.38699654 -0.62373429]]

Which is the same as the result of scipy.convolve2d: 
[[ 0.6077429  -0.14661592  0.29036408  0.19567047]
 [ 0.31519516 -0.07866619  0.52920251 -0.44948681]
 [-0.13608634 -0.90171287  0.94176527 -0.91012219]
 [ 0.69872346 -0.43798077 -0.38699654 -0.62373429]]</code></pre>
</div>
</div>
</section>
<section id="convolutional-neural-networks-cnnsconvnets" class="level2">
<h2 class="anchored" data-anchor-id="convolutional-neural-networks-cnnsconvnets">Convolutional neural networks (CNNs/Convnets)</h2>
<p>With that out of the way lets back up for a second and remember our old friends feed forward networks. What is the problem with using feed forward networks to process images? As it turns out, quite a few things:</p>
<ol type="1">
<li><p>Feed forward networks do not share information between different data points in the network. For example if X = [0,1,2,3] is a vector of input to the network, all the interactions between weights happen independently for each data point in one sample of data. This works fine for tabular features of some data, because they actually are not dependent on their spatial postion wrt each other. The model will learn the same if you shuffle all columns of a dataset. <br><br>But images pixels are a different type of data. They are inherently very locally dependent. If you look at a single pixel, it is very likely to be highly correlated with its neighboring pixels. Hence our network should process atleast patches of images at a time.</p></li>
<li><p>Earlier when classical image processing methods were being used, many a times hand-made “filters” were used to extract features from images. In CNNs, we learn these filters! and we learn a lot of them. So think of each layer in this CNN as having a lot of these filters which are learned during network.</p></li>
<li><p>Another concept that helps is parameter sharing. We could in thoery have different set of filters for different patches in the image, but this would shoot up the parameter count of our model. So in a single layer, we use a single set of filters for all patches in the image.</p></li>
</ol>
<p>Lets get into the tensor shapes now.</p>
</section>
<section id="shapes" class="level2">
<h2 class="anchored" data-anchor-id="shapes">Shapes</h2>
<p>Images are mostly represented as 3d tensors, of shape: <img src="https://latex.codecogs.com/png.latex?(H_%7Bin%7D,%20W_%7Bin%7D,%20C_%7Bin%7D)"> where <img src="https://latex.codecogs.com/png.latex?H_%7Bin%7D"> is the height of the image, <img src="https://latex.codecogs.com/png.latex?W_%7Bin%7D"> is the width of the image and <img src="https://latex.codecogs.com/png.latex?C_%7Bin%7D"> is the number of channels in the image. It helps to visualize volumes (3d) of numbers interacting with each other and resulting in volumes of data.</p>
<ul>
<li>input to Conv layer -&gt; <img src="https://latex.codecogs.com/png.latex?(H_%7Bin%7D,%20W_%7Bin%7D,%20C_%7Bin%7D)"></li>
<li>filters/weights of Conv layer -&gt; <img src="https://latex.codecogs.com/png.latex?C_%7Bout%7D%20*%20(k,k,C_%7Bin%7D)"> (ignoring biases for simplicity)</li>
<li>output of Conv layer -&gt; <img src="https://latex.codecogs.com/png.latex?(H_%7Bout%7D,%20W_%7Bout%7D,%20C_%7Bout%7D)"></li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?C_%7Bout%7D"> number of filters are learned. Each one is a tensor of shapes <img src="https://latex.codecogs.com/png.latex?(k,k,C_%7Bin%7D)"> where <img src="https://latex.codecogs.com/png.latex?k"> is the size of the filter (assuming square for simplicity too) and <img src="https://latex.codecogs.com/png.latex?C_%7Bin%7D"> is the number of input channels. <img src="https://latex.codecogs.com/png.latex?C_%7Bout%7D"> is the number of filters learned.</p>
<p>So when <img src="https://latex.codecogs.com/png.latex?C_%7Bout%7D"> filters of shape <img src="https://latex.codecogs.com/png.latex?(k,k,C_%7Bin%7D)"> are applied to an image of shape <img src="https://latex.codecogs.com/png.latex?(H_%7Bin%7D,W_%7Bin%7D,C_%7Bin%7D)">, the output is a 3d tensor of shape <img src="https://latex.codecogs.com/png.latex?(H_%7Bout%7D,%20W_%7Bout%7D,%20C_%7Bout%7D)"> where <img src="https://latex.codecogs.com/png.latex?H_%7Bout%7D"> is the height of the output and <img src="https://latex.codecogs.com/png.latex?W_%7Bout%7D"> is the width of the output.</p>
<p>That is basically the essence of a convolutional layer. There are a few other parameters to consider which together decide the values for <img src="https://latex.codecogs.com/png.latex?H_%7Bout%7D"> and <img src="https://latex.codecogs.com/png.latex?W_%7Bout%7D">.</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?S">: The stride. When we slide the filter over the input, we move it <img src="https://latex.codecogs.com/png.latex?S"> steps at a time. If stride is 2, we move the filter 2 pixels at a time. The output shape will be inversely proportional to the stride size.</li>
<li><img src="https://latex.codecogs.com/png.latex?P">: The padding. if we want to keep the height and width of the image, we can pad the input with zeros. see example here:</li>
</ol>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">f: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb7-2">g: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-3">convolve(f,g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<p>But after padding <img src="https://latex.codecogs.com/png.latex?f"> with 2 zeros on either side:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">f: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb8-2">convolve(f,g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<p>I would at this point ask you to take me on my word when i say that the output dimensions turn out to be:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?H_%7Bout%7D=(H_%7Bin%7D%E2%88%92k+2P)/S+1"></li>
<li><img src="https://latex.codecogs.com/png.latex?W_%7Bout%7D=(W_%7Bin%7D%E2%88%92k+2P)/S+1"></li>
</ul>
<p>Altough this is not true everytime, it is useful as a rule of thumb. the only times this wont be true are if we have different <img src="https://latex.codecogs.com/png.latex?S">, <img src="https://latex.codecogs.com/png.latex?k"> or <img src="https://latex.codecogs.com/png.latex?P"> along the height and width dimensions.</p>
<p>To visualize the interaction of filters and input images, you can go <a href="https://ezyang.github.io/convolution-visualizer/">here</a>.</p>
</section>
<section id="other-layers" class="level2">
<h2 class="anchored" data-anchor-id="other-layers">Other layers</h2>
<p>CNN layers are usually follwed by activation functions like ReLU and then a pooling layer.</p>
<p>Pooling layer? yeah, pooling layer. So given a volume of input say instead of using filters we just use operations non parameterized like min and max just to downsample the data and get a smaller volume. That is what pooling does. But why would we do something like that? 2 reasons:</p>
<ol type="1">
<li>Reduce the number of parameters: By reducing the number of parameters, the model can learn more general features.</li>
<li>Reduce the amount of overfitting: By reducing the amount of overfitting, the model can learn more robust features.</li>
</ol>
</section>
<section id="some-jargon" class="level2">
<h2 class="anchored" data-anchor-id="some-jargon">Some jargon</h2>
<ul>
<li>filters: also called kernels. they are learnable parameters in a convolutional layer. Each filter is a small matrix (usually 3x3 or 5x5) that slides over the input image to detect specific features. The values in these filters are updated during training to learn important features for the task at hand.</li>
<li>activation maps: the output when a [Conv-&gt;Relu] filter interacts with entire image.</li>
<li>feature maps: the output of a convolutional layer. (before the activation)</li>
<li>depth: refers to the number of channels.</li>
<li>receptive field: the area of the input that a given filter is able to see at a time is called the receptive field.</li>
</ul>
</section>
<section id="a-simple-cnn-architecture" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-cnn-architecture">A Simple CNN architecture</h2>
<p>Lets assume a simple task of image classification. The most common form of a CNN architecture stacks a few CONV-RELU layers, follows them with POOL layers, and repeats this pattern until the image volume has reduced to a small size. At some point, it is common to transition to fully-connected layers. The last fully-connected layer holds the output, such as the class scores. In other words, the most common ConvNet architectures follow the pattern:</p>
<p><code>INPUT -&gt; [[CONV -&gt; RELU]*N -&gt; POOL?]*M -&gt; [FC -&gt; RELU]*K -&gt; FC</code></p>
<p>here FC: feed-forward layer.</p>
<p>Note that since architectures like <a href="https://arxiv.org/pdf/1512.03385">Resnet</a> and <a href="https://arxiv.org/pdf/1409.4842">Inception</a> emerged, this is not the case, and the CNNs feature more intricate and different connectivity structures.</p>
</section>
<section id="cnn-characteristics" class="level2">
<h2 class="anchored" data-anchor-id="cnn-characteristics">CNN characteristics</h2>
<p>While we are here, let us also take note of some characteristics of CNNs:</p>
<ul>
<li><strong>Sparse connectivity</strong>: CNNs focus on local patterns in data, particularly useful for spatial data like images. A single patch in feature map is connected to only a small patch of image (in MLPs there is dense/full connection).</li>
<li><strong>Parameter sharing</strong>: the same kernel/filter slides across the image. ie different neurons in each activation map is calculated using the same filter. In MLPs each neuron in the output space is calculated using different weight values. this makes it efficient for computation.</li>
<li><strong>Spatial hierarchy</strong>: CNNs build a hierarchy of increasingly abstract features. Lower layers detect simple features (e.g., edges), while deeper layers combine these to detect more complex patterns.</li>
<li><strong>Translation invariance</strong>: CNNs can recognize patterns regardless of their position in the input. This is because we are using filters that slide over patches of data, so information is processed in the same way for different patches of data This is crucial for tasks like object recognition in images.</li>
</ul>
<div id="fig-cnn-activation-maps" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cnn-activation-maps-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.deepamminda.com/posts/cnns/visualizing-activation-maps-cnns.png" style="width:90.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-cnn-activation-maps-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: visualizing activation maps in cnns. From the paper ‘Visualizing and Understanding Convolutional Networks’
</figcaption>
</figure>
</div>
<p>Have a look at <a href="https://arxiv.org/pdf/1311.2901">this</a> wonderful paper that dives deep into visualizing and understanding Cnns.</p>
</section>
<section id="lets-train-a-model-yaar" class="level2">
<h2 class="anchored" data-anchor-id="lets-train-a-model-yaar">Lets train a model yaar</h2>
<p>I’d be remiss if I let you finish here thinking that you got CNNs down. Just for old times sake, lets train a model to classify images from the fashion mnist dataset. The dataset contains very small grayscale (ie single channel) images of size (28*28).</p>
<blockquote class="blockquote">
<p>the below code is all generated by claude-sonnet-3.5, bcuz its kinda boring to train a toy model on a toy dataset, that too for classification. dont worry though, ill soon be back with a more interesting vision problem to get our hands dirty.</p>
</blockquote>
<div id="cell-12" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchsummary <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the CNN architecture</span></span>
<span id="cb9-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SimpleCNN(nn.Module):</span>
<span id="cb9-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(SimpleCNN, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb9-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input channels in layer1 is equal to number of input channels in the input image</span></span>
<span id="cb9-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb9-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-21"></span>
<span id="cb9-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb9-23">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(torch.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(x)))</span>
<span id="cb9-24">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(torch.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(x)))</span>
<span id="cb9-25">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(torch.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3(x)))</span>
<span id="cb9-26">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flattening the tensor to feed it to FC layer</span></span>
<span id="cb9-27">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(x))</span>
<span id="cb9-28">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(x)</span>
<span id="cb9-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span>
<span id="cb9-30"></span>
<span id="cb9-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set device</span></span>
<span id="cb9-32">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_built() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb9-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-34"></span>
<span id="cb9-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load and preprocess the Fashion MNIST dataset (just plain old standardization)</span></span>
<span id="cb9-36">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([transforms.ToTensor(), transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,))])</span>
<span id="cb9-37"></span>
<span id="cb9-38">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.datasets.FashionMNIST(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb9-39">test_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.datasets.FashionMNIST(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb9-40"></span>
<span id="cb9-41">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-42">test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-43"></span>
<span id="cb9-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the model, loss function, and optimizer</span></span>
<span id="cb9-45">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleCNN()</span>
<span id="cb9-46"></span>
<span id="cb9-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize model summary</span></span>
<span id="cb9-48">summary(model, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb9-49"></span>
<span id="cb9-50">model.to(device)</span>
<span id="cb9-51"></span>
<span id="cb9-52">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb9-53">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb9-54"></span>
<span id="cb9-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb9-56">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb9-57">all_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-58"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb9-59">    model.train()</span>
<span id="cb9-60">    epoch_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch_idx, (data, targets) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(train_loader):</span>
<span id="cb9-62">        data, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), targets.to(device)</span>
<span id="cb9-63">        </span>
<span id="cb9-64">        optimizer.zero_grad()</span>
<span id="cb9-65">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data)</span>
<span id="cb9-66">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb9-67">        loss.backward()</span>
<span id="cb9-68">        optimizer.step()</span>
<span id="cb9-69">        epoch_losses.append(loss.item())</span>
<span id="cb9-70">    </span>
<span id="cb9-71">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">], Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(epoch_losses)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-72">    all_losses.extend(epoch_losses)</span>
<span id="cb9-73"></span>
<span id="cb9-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot train loss curve</span></span>
<span id="cb9-75">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb9-76">plt.plot(all_losses)</span>
<span id="cb9-77">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb9-78">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb9-79">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Loss Curve'</span>)</span>
<span id="cb9-80">plt.show()</span>
<span id="cb9-81"></span>
<span id="cb9-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluation</span></span>
<span id="cb9-83">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb9-84">correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-85">total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-86"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb9-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb9-88">        data, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), targets.to(device)</span>
<span id="cb9-89">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data)</span>
<span id="cb9-90">        _, predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(outputs.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-91">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> targets.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-92">        correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> targets).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb9-93"></span>
<span id="cb9-94"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Test Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>device: mps
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 28, 28]             320
         MaxPool2d-2           [-1, 32, 14, 14]               0
            Conv2d-3           [-1, 64, 14, 14]          18,496
         MaxPool2d-4             [-1, 64, 7, 7]               0
            Conv2d-5             [-1, 32, 7, 7]          18,464
         MaxPool2d-6             [-1, 32, 3, 3]               0
            Linear-7                  [-1, 128]          36,992
            Linear-8                   [-1, 10]           1,290
================================================================
Total params: 75,562
Trainable params: 75,562
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.00
Forward/backward pass size (MB): 0.37
Params size (MB): 0.29
Estimated Total Size (MB): 0.67
----------------------------------------------------------------
Epoch [1/5], Loss: 0.5107
Epoch [2/5], Loss: 0.3174
Epoch [3/5], Loss: 0.2693
Epoch [4/5], Loss: 0.2401
Epoch [5/5], Loss: 0.2185</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.deepamminda.com/posts/cnns/00_cnn_basics_files/figure-html/cell-5-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Accuracy: 90.38%</code></pre>
</div>
</div>
<p>Neat!! Now let’s visualize some of the predictions.</p>
<div id="cell-14" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb12-2"></span>
<span id="cb12-3">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T-shirt/top'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Trouser'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pullover'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dress'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coat'</span>, </span>
<span id="cb12-4">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sandal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shirt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sneaker'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ankle boot'</span>]   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify using train_dataset.classes</span></span>
<span id="cb12-5"></span>
<span id="cb12-6">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb12-7">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb12-8">fig.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Predictions'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb12-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_dataset)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)):</span>
<span id="cb12-12">        image, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_dataset[idx]</span>
<span id="cb12-13">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(image.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb12-14">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb12-15">        </span>
<span id="cb12-16">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb12-17">        ax.imshow(image.squeeze(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb12-18">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb12-19">        ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Pred: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_names[predicted]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">True: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_names[label]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, </span>
<span id="cb12-20">                     color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> label <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb12-21"></span>
<span id="cb12-22">plt.tight_layout()</span>
<span id="cb12-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.deepamminda.com/posts/cnns/00_cnn_basics_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<hr>
<p>I hope you clearly understand the core CNN fundamental architecture. This is just the base that’ll act as a foundation for more interesting architectures as we go on. Until then, see you in the next one!</p>
<p>Byeee :)</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li>sebastian raschka course material <a href="https://sebastianraschka.com/blog/2021/dl-course.html#l13-introduction-to-convolutional-neural-networks">here</a></li>
<li>CS231N Cnn notes <a href="https://cs231n.github.io/convolutional-networks/#case">here</a>. Great intuition and more detail about the shapes, local connectivity, spatial arrangement, and loads of other stuff.</li>
<li>arc folder where i maintain things related to CNNs <a href="https://arc.net/folder/08A8A6B3-0E12-4F25-A3B2-B3B956068848">here</a></li>
<li>beginner friendly article on Medium (its a great blog-series for ML) <a href="https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721">here</a></li>
<li>Visualizing and Understanding Convolutional Networks. 2014 paper <a href="https://arxiv.org/pdf/1311.2901">here</a></li>
</ul>


</section>

 ]]></description>
  <category>cnns</category>
  <category>deep-learning</category>
  <guid>https://www.deepamminda.com/posts/cnns/00_cnn_basics.html</guid>
  <pubDate>Mon, 29 Jul 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Language Modelling with RNNs</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://www.deepamminda.com/posts/rnns/01_rnns_basics.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The only reason you would be hearing RNNs right now is probably when <a href="https://arxiv.org/pdf/2405.04517">xLSTMs</a> were released in May, 2024. Apart from this they have pretty much taken a back seat to watch transformers revolutionalize NLP and the entire field of AI in general.</p>
<p>But one would do well to remember how we got here, and RNNs played a massive role in bringing us here. So in this blog post I’m going to build a small RNN model and we’ll try to train it to generate text.</p>
</section>
<section id="import-data-and-process-it" class="level1">
<h1>Import data and process it</h1>
<div id="cell-4" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</div>
<p>Let us load a text dataset. I downloaded a few mystery books and concatenated their raw text to make the dataset. Follow <a href="https://github.com/mindadeepam/mindadeepam.github.io/blob/posts/posts/rnns/corpus.txt">this</a> link to get the text file.</p>
<div id="cell-6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/deepamminda/Downloads/corpus.txt"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dataset_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-4">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the size of data: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> characters"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>the size of data: 3062155 characters</code></pre>
</div>
</div>
<p>Lets have a look at some of the text we have.</p>
<div id="cell-8" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sample data chunk:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Sample data chunk:
'n one of his own high-power lenses, would not
be more disturbing than a strong emotion in a nature such as his. And
yet there was but one woman to him, and that woman was the late Irene
Adler, of dubious and questionable memory.

I had seen little of Holmes lately. My marriage had drifted us away
from each other. My own complete happiness, and the home-centred
interests which rise up around the man who first finds himself master
of his own establishment, were sufficient to absorb all my attention,
while Holmes, who loathed every form of society with his whole Bohemian
soul, remained in our lodgings in Baker Street, buried among his old
books, and alternating from week to week between cocaine and ambition,
the drowsiness of the drug, and the fierce energy of his own keen
nature. He was still, as ever, deeply attracted by the study of crime,
and occupied his immense faculties and extraordinary powers of
observation in following out those clues, and clearing up those
mysteries which had b'</code></pre>
</div>
</div>
<p>Lets split the data into train and test (80-20)</p>
<div id="cell-10" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb6-2">train_data, test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[:train_size], data[train_size:]</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  (in number of tokens)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train_size: 2449724, test_size: 612431  (in number of tokens)</code></pre>
</div>
</div>
<p>Now let us encode the text to numerical data that our model can understand. Encoding the data generally means tokenization and then encoding. To keep it super simple, we’ll just use individual characters as tokens.</p>
<p>Nowadays however, subword <a href="(https://huggingface.co/docs/transformers/main/en/tokenizer_summary)">tokenization algorithms</a> like Byte-Pair Encoding are the norm. But let us not get caught up in those for now.</p>
<div id="cell-12" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the vocabulary and special tokens</span></span>
<span id="cb8-2">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(train_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12345678910qwertyuioplkjhgfdsamnbvcxz~!@#$%^&amp;*()_+`-=[];'./,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:?&gt;&lt;\|"</span>))</span>
<span id="cb8-3">PAD_TOKEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;pad&gt;'</span></span>
<span id="cb8-4">special_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [PAD_TOKEN]</span>
<span id="cb8-5">MAX_SEQ_LEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb8-6"></span>
<span id="cb8-7">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>special_tokens, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vocab]</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create mappings for encoding and decoding</span></span>
<span id="cb8-10">decode_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vocab))</span>
<span id="cb8-11">encode_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v:k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> decode_mapping.items()}</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define encoding and decoding functions</span></span>
<span id="cb8-14">encode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> text: [encode_mapping[char] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> text]</span>
<span id="cb8-15">decode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> text: [decode_mapping[char] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> text]</span></code></pre></div>
</div>
<p>Now we can do a simple sanity check by encoding a text and decoding it. we should get the original string back.</p>
<div id="cell-14" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hey there"</span></span>
<span id="cb9-2">encoded_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode(text)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"original text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tokenized text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'encoded text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>encoded_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"decoded back:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>decode(encoded_text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>original text: hey there
tokenized text: ['h', 'e', 'y', ' ', 't', 'h', 'e', 'r', 'e']
encoded text: [104, 81, 106, 37, 89, 104, 81, 8, 81]
decoded back:['h', 'e', 'y', ' ', 't', 'h', 'e', 'r', 'e']</code></pre>
</div>
</div>
<p>Now we need functions that will do this for batches of texts rather than single text. When dealing with batches, there are a few extra considerations: - You would typically want your batches to contain texts which are of same length, so that matrix/tensor operations can be performed. Hence we need to truncate longer sentences and pad shorter sentences to a fixed length.</p>
<p>For simplicity let us also define a function that will fetch us a random batch of data from our training set.</p>
<div id="cell-18" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_data(data, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Retrieves input and target data for training a recurrent neural network (RNN).</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        data (list): The input data.</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        batch_size (int, optional): The number of sequences in each batch. Defaults to 16.</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        seq_len (int, optional): The length of each sequence. Defaults to 256.</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the input and target data tensors.</span></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - inputs (torch.Tensor): The input data tensor.</span></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - targets (torch.Tensor): The target data tensor.</span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb11-16">    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span>
<span id="cb11-17">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size)</span>
<span id="cb11-18">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len</span>
<span id="cb11-19">    texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [data[s:e] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(start, end)]</span>
<span id="cb11-20">    </span>
<span id="cb11-21">    encoded_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode_arr(texts, max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-22">    targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_texts[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb11-23">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_texts[:, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb11-24">    </span>
<span id="cb11-25">    targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(targets, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb11-26">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(inputs, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb11-27">    </span>
<span id="cb11-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inputs, targets</span>
<span id="cb11-29"></span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target is just x shifted one token to the left!"</span>)</span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x[0]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">y[0] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>target is just x shifted one token to the left!
x[0]: tensor([  0,  81,   8, 112,  37,  49,  21,  37,  31,  37,  47,  31,  79,  37,
        100, 104,  49,  37,  97,  96,  37,  96,  89]),
y[0] tensor([ 81,   8, 112,  37,  49,  21,  37,  31,  37,  47,  31,  79,  37, 100,
        104,  49,  37,  97,  96,  37,  96,  89,   8])</code></pre>
</div>
</div>
</section>
<section id="rnns" class="level1">
<h1>RNNs</h1>
<p>Now before modelling, let us look at a RNN layer and understand its input and outputs. Each RNN layer has the following basic archtecture:</p>
<div id="fig-unrolled-rnn" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-unrolled-rnn-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.deepamminda.com/posts/rnns/rnn_unrolled.png" style="width:70.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-unrolled-rnn-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: unrolled RNN
</figcaption>
</figure>
</div>
<section id="understanding-rnns" class="level2">
<h2 class="anchored" data-anchor-id="understanding-rnns">Understanding RNNs</h2>
<p>RNNs have 2 matrices, one (<img src="https://latex.codecogs.com/png.latex?W_%7Bxh%7D">) that maps input tokens to hidden_vector size and another (<img src="https://latex.codecogs.com/png.latex?W_%7Bhh%7D">) that maps from hidden_vector to hidden_vector. You’ll see how these are used in a minute.</p>
<p>Let us first look at input-output shapes for an RNN layer. We initially had a batch of text-tokens. Lets assume batch size of 4 and max_seq_len of 32. Hence the shape of input is (4,32).</p>
<p>Now for each token, we encode it to a number and then map it to a vector (which we generally call an embedding). Hence each token is now represented by a vector of fixed-shape, and lets call this embedding_dimension and set it to 10. (This can also be done by classical methods like one-hot encoding, ngram-models)</p>
<p>The shape of our input batch is now (batch_size, max_seq_len, emb_dim), ie (4,32,10).</p>
<p>Now let us peek into the matrix multiplications inside a RNN layer. Firstly, lets us recall that for a linear layer, this is the matrix equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?z%20(N,%20n_%7Bout%7D)%20=%20%5Csigma(x%20(N,%20n_%7Bin%7D)%20*%20W_x%5ET%20(n_%7Bin%7D,%20n_%7Bout%7D)%20+%20b%20(N))"></p>
<p>where ,</p>
<ul>
<li>input-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bin%7D"></li>
<li>output-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bout%7D"></li>
<li>batch-size = <img src="https://latex.codecogs.com/png.latex?N"></li>
</ul>
<p>In a linear layer, each token/feature is attended to by a different weight in the weight matrix and no information is shared among the sequence tokens. But when processing “sequences” we obviously want the model to remember stuff from previous tokens for the current token, right?</p>
<p>Hence RNNs maintain a hidden_vector for each token, that takes as input the current token and the hidden_vector from the previous token’s output.</p>
<p>So for the <img src="https://latex.codecogs.com/png.latex?t">’th token,</p>
<p><img src="https://latex.codecogs.com/png.latex?h_t%20(N,%20h)=%20x_t%20(N,%20n_%7Bin%7D)%20*%20W_%7Bxh%7D%5ET%20(n_%7Bin%7D,%20h)%20+%20h_%7Bt-1%7D%20(N,%20h)%20*%20W_%7Bhh%7D%5ET%20(h,%20h)%20+%20biases"></p>
<p>where</p>
<ul>
<li>input-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bin%7D"></li>
<li>hidden-size = <img src="https://latex.codecogs.com/png.latex?h"></li>
<li>batch-size = <img src="https://latex.codecogs.com/png.latex?N"></li>
<li>sequence-length = <img src="https://latex.codecogs.com/png.latex?s"></li>
</ul>
<p>As you’ll notice since each token depends on previous tokens output, we cannot process this parallelly and have to iteratively calculate the output for each token. Also note we generally refer to the different tokens in a sequence as different timesteps, ie token at timestep t is <img src="https://latex.codecogs.com/png.latex?x_t">.</p>
<p>Hence for a complete batch, inputs are:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?X"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20n_%7Bin%7D)"></li>
<li><img src="https://latex.codecogs.com/png.latex?h_0"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20h)"> (this is optional, if not given most libraries will initiate a <img src="https://latex.codecogs.com/png.latex?h_0"> of all zeros or random numbers)</li>
</ul>
<p>And outputs are:</p>
<ul>
<li>hidden states of all timesteps, ie <img src="https://latex.codecogs.com/png.latex?H"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20h)"></li>
<li>last_hidden_state ie <img src="https://latex.codecogs.com/png.latex?h_n"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20h)"></li>
</ul>
<p>Note: sometimes you will see outputs of rnn fed into a linear layer like so,</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">outputs, h_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(x)</span>
<span id="cb14-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc(outputs[:,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:])</span></code></pre></div>
<p>Here <code>h_n</code> and <code>outputs[:,-1,:]</code> are the same thing. They both represent the last hidden state for the entire batch. (to make shapes equal use <code>h_n.squeeze()</code>)</p>
<p>Lets verify the above by passing inputs to an rnn layer.</p>
<div id="cell-22" class="cell" data-execution_count="19">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">emb_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb15-2">hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb15-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb15-4">max_seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"batch_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, hidden_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hidden_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, max_seq_len: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_seq_len<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, emb_dim: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>emb_dim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-7">X,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_seq_len, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size)</span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"shape of initial input -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10">emb_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(num_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab), embedding_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb_dim)</span>
<span id="cb15-11">rnn_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.RNN(input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb_dim, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hidden_size, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bidirectional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-12"></span>
<span id="cb15-13">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_layer(X)</span>
<span id="cb15-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"post embedding; shape of input to RNN layer -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-15">h_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, batch_size, hidden_size)</span>
<span id="cb15-16">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnn_layer(X, h_0)</span>
<span id="cb15-17"></span>
<span id="cb15-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"RNN output shapes -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>[outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].shape <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>batch_size: 8, hidden_size: 128, max_seq_len: 32, emb_dim: 128
shape of initial input -&gt; torch.Size([8, 32])
post embedding; shape of input to RNN layer -&gt; torch.Size([8, 32, 128])
RNN output shapes -&gt; torch.Size([8, 32, 128]), [torch.Size([8, 128])]</code></pre>
</div>
</div>
</section>
</section>
<section id="language-modelling" class="level1">
<h1>Language Modelling</h1>
<p>Now let us build a model and train it. For starters we’ll just use a <a href="https://pytorch.org/docs/stable/generated/torch.nn.RNN.html#torch.nn.RNN">torch.nn.RNN</a> layer to build the model and train it. Once we get the entire training and testing pipeline complete, we can come back and build the model from scratch.</p>
<section id="how-exactly-can-we-generate-text-though" class="level3">
<h3 class="anchored" data-anchor-id="how-exactly-can-we-generate-text-though">How exactly can we generate text though?</h3>
<p>We know we can get hidden states of the entire sequence as outputs from a rnn layer, but each hidden state <img src="https://latex.codecogs.com/png.latex?h_t"> has ponly seen information till timestep <img src="https://latex.codecogs.com/png.latex?t">. What we can do is this:</p>
<ul>
<li>only use the last hidden state and feed it to a linear layer with output shape equal to size of vocabulary.</li>
<li>if softmax is applied on top of the linear layer’s output, it turns raw logits into the probabilities for different tokens in our vocab. This can be done outside the forward function too.</li>
</ul>
<p>Now each input sequence gives us one output token ie <img src="https://latex.codecogs.com/png.latex?y_%7Bt+1%7D">. then we can take the sequence from <img src="https://latex.codecogs.com/png.latex?1"> to <img src="https://latex.codecogs.com/png.latex?t+1"> and generate token <img src="https://latex.codecogs.com/png.latex?y_%7Bt+2%7D">.</p>
</section>
<section id="during-training" class="level3">
<h3 class="anchored" data-anchor-id="during-training">During Training</h3>
<p>To maximize training we can use all hidden state outputs instead of the last one. Because why wouldnt we want the model to learn from all its outputs!</p>
<ul>
<li>output of rnn layer of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20h)"> is fed into a linear layer of shape <img src="https://latex.codecogs.com/png.latex?(h,%20vocab%5C_size)"> to get <img src="https://latex.codecogs.com/png.latex?(N,s,vocab%5C_size)"> outputs. then we can pass them via softmax and apply cross-entropy loss on all of them and backpropagate through the model.</li>
<li>since at token level we now have <img src="https://latex.codecogs.com/png.latex?N*s"> tokens on which we will calculate loss, its simpler to flatten the targets and generated logits before passing to cross-entropy loss.</li>
</ul>
<p>Note: Had it been a classification task, we could just pass last hidden_state, <img src="https://latex.codecogs.com/png.latex?h_n"> to a linear layer with output size equal to number of classes.</p>
</section>
<section id="the-model" class="level2">
<h2 class="anchored" data-anchor-id="the-model">The model</h2>
<div id="cell-25" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate size of model parameters</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> count_parameters(model):</span>
<span id="cb17-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p.requires_grad)</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Rnn_model(nn.Module):</span>
<span id="cb17-6"></span>
<span id="cb17-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, embedding_size, max_seq_len, hidden_size, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vocab_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb17-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the Rnn_model class.</span></span>
<span id="cb17-10"></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            embedding_size (int): The size of the embedding dimension.</span></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            max_seq_len (int): The maximum sequence length.</span></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            hidden_size (int): The size of the hidden state dimension.</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            num_layers (int, optional): The number of recurrent layers. Defaults to 1.</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            vocab_size (int, optional): The size of the vocabulary. Defaults to None.</span></span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb17-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Rnn_model, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb17-20"></span>
<span id="cb17-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_seq_len</span>
<span id="cb17-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vocab_size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> vocab_size</span>
<span id="cb17-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(num_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size, embedding_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embedding_size)</span>
<span id="cb17-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.LSTM(input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embedding_size, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hidden_size, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_layers)</span>
<span id="cb17-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab))</span>
<span id="cb17-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.softmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Softmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss(ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore pad token</span></span>
<span id="cb17-28"></span>
<span id="cb17-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb17-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" </span></span>
<span id="cb17-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a forward pas thorugh the model.</span></span>
<span id="cb17-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x: input torch tensor (B,T,S)</span></span>
<span id="cb17-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        targets: input targets (B,T,S)</span></span>
<span id="cb17-34"></span>
<span id="cb17-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb17-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        (model output logits, loss)</span></span>
<span id="cb17-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb17-38">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len:]</span>
<span id="cb17-39">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding(x)</span>
<span id="cb17-40">        H, h_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(x)</span>
<span id="cb17-41"></span>
<span id="cb17-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y = self.fc(H[:,-1,:])</span></span>
<span id="cb17-43">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc(H)</span>
<span id="cb17-44">        </span>
<span id="cb17-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb17-46">            B, T, V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.shape</span>
<span id="cb17-47">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion(y.view(B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T, V), targets.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb17-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb17-49">        </span>
<span id="cb17-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y, loss</span>
<span id="cb17-51">    </span>
<span id="cb17-52">    </span>
<span id="cb17-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span></span>
<span id="cb17-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_text, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>):</span>
<span id="cb17-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" </span></span>
<span id="cb17-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        input_text: a string or list of strings to generate text using the model.</span></span>
<span id="cb17-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_len: model will generate maximum of max_len tokens.</span></span>
<span id="cb17-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb17-59">        </span>
<span id="cb17-60">        encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(encode_arr([input_text], max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>))</span>
<span id="cb17-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> encoded_tokens.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb17-62">            encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_tokens.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb17-63"></span>
<span id="cb17-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.to(device)</span>
<span id="cb17-65">        encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_tokens.to(device)</span>
<span id="cb17-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_len):</span>
<span id="cb17-67">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only keep the most recent seq_len sized numbers.</span></span>
<span id="cb17-68">            outputs, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>(encoded_tokens[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len:])</span>
<span id="cb17-69"></span>
<span id="cb17-70">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last output token</span></span>
<span id="cb17-71">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :]</span>
<span id="cb17-72"></span>
<span id="cb17-73">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get pribabilities from logits</span></span>
<span id="cb17-74">            next_token_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.functional.softmax(outputs, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-75"></span>
<span id="cb17-76">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample indices from it using a multinomial distribution</span></span>
<span id="cb17-77">            next_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(next_token_probs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-78"></span>
<span id="cb17-79">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat prediction to original text</span></span>
<span id="cb17-80">            encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat((encoded_tokens, next_tokens), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-81"></span>
<span id="cb17-82">        decoded_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decode_arr(encoded_tokens)</span>
<span id="cb17-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(decoded_texts)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb17-84">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> decoded_texts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#.replace("&lt;pad&gt;", "") </span></span>
<span id="cb17-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb17-86">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return [text.replace("&lt;pad&gt;", "") for text in decoded_texts]</span></span>
<span id="cb17-87">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> decoded_texts</span></code></pre></div>
</div>
</section>
<section id="training-loop" class="level2">
<h2 class="anchored" data-anchor-id="training-loop">Training loop</h2>
<p>Now I’ll define a basic training loop to train this model, and we’ll generate text every 1k steps to see the model learn right before us! Im also using tensorboard to log and view my runs. IMO its the best way to visualize loss curves and debug model behavior.</p>
<div id="cell-27" class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.tensorboard <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SummaryWriter</span>
<span id="cb18-2">writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SummaryWriter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./runs/with_gradients/'</span>)</span>
<span id="cb18-3"></span>
<span id="cb18-4">NUM_STEPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb18-5">MAX_SEQ_LEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb18-6">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb18-7">EMBEDDING_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb18-8">HIDDEN_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb18-9">NUM_LAYERS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-10">LR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> </span>
<span id="cb18-11">LOG_EVERY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb18-12">GENERATE_EVERY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb18-13"></span>
<span id="cb18-14">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_built() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb18-15"></span>
<span id="cb18-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Rnn_model(embedding_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>EMBEDDING_SIZE, max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MAX_SEQ_LEN, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HIDDEN_SIZE, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NUM_LAYERS)</span>
<span id="cb18-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"paramter count of the model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count_parameters(model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, data_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-18">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LR)</span>
<span id="cb18-19">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_STEPS)):</span>
<span id="cb18-21">    optimizer.zero_grad()</span>
<span id="cb18-22">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, BATCH_SIZE, MAX_SEQ_LEN)</span>
<span id="cb18-23">    </span>
<span id="cb18-24">    model.to(device)</span>
<span id="cb18-25">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.to(device), y.to(device)</span>
<span id="cb18-26">    outputs, loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x, y)</span>
<span id="cb18-27">    loss.backward()</span>
<span id="cb18-28"></span>
<span id="cb18-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clip gradients</span></span>
<span id="cb18-30">    torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb18-31"></span>
<span id="cb18-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log gradients before the optimization step</span></span>
<span id="cb18-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, param <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.named_parameters():</span>
<span id="cb18-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> param.grad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb18-35">            writer.add_histogram(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'gradients/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, param.grad, i)</span>
<span id="cb18-36"></span>
<span id="cb18-37">    optimizer.step()</span>
<span id="cb18-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>LOG_EVERY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb18-39">        losses.append(loss)</span>
<span id="cb18-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(loss.item())</span></span>
<span id="cb18-41">    </span>
<span id="cb18-42">    writer.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss/train'</span>, loss.item(), i)</span>
<span id="cb18-43"></span>
<span id="cb18-44">    </span>
<span id="cb18-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>GENERATE_EVERY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>NUM_STEPS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb18-46">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> steps: "</span>)</span>
<span id="cb18-47">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'but I told him clearly, that if'</span></span>
<span id="cb18-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prompt is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-49">        gen_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.generate(prompt, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb18-50">        gen_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;pad&gt;"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb18-51">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">text generated by model: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gen_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-52">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb18-53">        </span>
<span id="cb18-54"></span>
<span id="cb18-55">writer.close()</span>
<span id="cb18-56"></span>
<span id="cb18-57">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [loss.cpu().detach().numpy().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> losses] </span>
<span id="cb18-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(losses[::3])</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>paramter count of the model: 1114232, data_size: 2449724

after 0 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that ifâDaL—WX2m‘;D3æJqèup½’VDnJi^Rjje(lSïVcCrgWmMQSXA9W9`_Fî+E5l&amp;1sVq\6]=^fê—&gt;804àâ!yñêI・y=6&amp;l,{$Oû.1—u*$9‘KM!Oñ-cW’MéñhB~M.j6r{}xl

---------------------------------------------------------------------------
after 1000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if
Twen tracked of him grivel-napregred whotain one come,
in hy midge withoush, which shoulquould before so speeded the feet in th

---------------------------------------------------------------------------
after 2000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if still come, but I don’t know. Mc! So yester I shall five onnestible, “that peired, want and
asfected to his harded has
Farching

---------------------------------------------------------------------------
after 3000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that ifner, for sheep there indobless.
And Holmes
when we start the once.”

“Thanks between rouse vrisings of as one of
firied presing,

---------------------------------------------------------------------------
after 4000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if you had a explain and after we like it. He is every are that the main that in a valued her this example in our myselture for th

---------------------------------------------------------------------------
after 5000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if yim you have helpered befored. Therest name It
famousore, that he sat three
      it, and he said that we met him earsh back in

---------------------------------------------------------------------------
after 6000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if I can
started which he came many way heir imperiable takely room. A now,
      “What was only fancy,” he was a gentleman concei

---------------------------------------------------------------------------
after 7000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if your mistaken, and yet use_ the
Close of Baskerville, is obvious fashions and left your
brusticion of the longly seat from this

---------------------------------------------------------------------------
after 8000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if I’d fain the
others.”

“How made you, Watson, he was demilent? With past as another? One enemal with fift me out and was art vi

---------------------------------------------------------------------------
after 9000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if I do follow made the owns
behind these common understand that is I, and they may not cast
occurred to suggest we idea?”

“Not r

---------------------------------------------------------------------------
after 9999 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if if I was able faintled back in the hand, air which had
dirmanscoctors way. That’s close.

“Does_ gone. I recond feare, and that

---------------------------------------------------------------------------
[4.787812232971191, 1.8653450012207031, 1.7018814086914062, 1.655837059020996, 1.5209026336669922, 1.5495105981826782, 1.5696816444396973, 1.560757040977478, 1.5683640241622925, 1.4509146213531494, 1.4306949377059937, 1.4603841304779053, 1.3696606159210205, 1.5044567584991455, 1.3786689043045044, 1.3815288543701172, 1.3697071075439453]</code></pre>
</div>
</div>
<div id="cell-28" class="cell" data-execution_count="73">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot losses</span></span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb20-3"></span>
<span id="cb20-4">plt.plot(losses)</span>
<span id="cb20-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Loss"</span>)</span>
<span id="cb20-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Steps"</span>)</span>
<span id="cb20-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="73">
<pre><code>Text(0, 0.5, 'Loss')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.deepamminda.com/posts/rnns/01_rnns_basics_files/figure-html/cell-15-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The results certainly improve over the iterations, and its clearly visible that the model is learning to generate text. By scaling the model and training for longer, we can get better results.</p>
<p>Thank you for reading this and I hope you found it useful. The next time I update this blog post, I’ll be adding the following:</p>
<ul>
<li>Evaluation on test set (metrics like perplexity).</li>
<li>Implementing RNN, LSTM and GRU from scratch.</li>
</ul>
<p>Byee :)</p>
<!---
- sqitching from SGD to adam instantly gives boost (2.8 vs under 2)
- tripling the data gave no gains on 50k basic rnn model!
- 300k characters seems enough to generate coherent text, why not happening here?
    - lets try a few things, take small corpus (2-3mil chars), <1 million param model and use techiques like grad-clipping, mps on mac local(faster), and see if we can get it to generate coherent text.
    - mps reduces training-time by more than half.
    - grad clipping doesnt seem to affect quality on inspection of generated text.

- logging to tensorboard to keep track of experiments and to visualize gradients too. (X-ray vision)
-->
<!---
#### 100k rnn model - 3million chars: ~1.5 loss, kinda starts to form words
outputs:
1. hey there handsome what death which are a discroose.”
2. I recall went small-boy’s Louded spoke. T


#### 100k rnn model - 12million chars: ~1.6 loss, similar 
1. hey there handsome what
to on?”

Midams: I lady of
quiked in her put intented to the burgent wonder the risons of the saw
      four spikely. To belled
2. I recall Katerinoad and sure
conforty, unsole only geitute and, and it stigged refundled as a
  was abserved. Every tran at you.”

THO"Ci

#### 330k lstm model - 12million chars: ~ 1.52 loss, 
1. hey there handsome what?” are that indid of nebvense of the Samiskamen theory instance Loins, fry committed, or suggested fagreedingly.

Judge Stannaph
2. I recall are that any quality shall, as the man
been unknight, in his
closkered. The common as though sad so'll he had she askoccite
    
#### 1million lstm model - 3million chars: ~1.4 loss, 10k steps 
paramter count of the model: 1114232, 3million chars  

text generated by model after 0 steps of training but I told him clearly, that ifVOS£QY^DêX£véF LD[sœPyZê$t½’sXz<nf#t0|%çIw<à’"n・ê+r^êi?\fZâEl@K
Yu%@3VâZJ}_}$B` àl・à$rï:hàNBbZ0j½~6#û8vàC/[Vn$KRéüylyhê|.ûî&EJ2I


text generated by model after 1000 steps of training but I told him clearly, that if the bet’s of the
      yecraiuply that deen-tated for langent
pasts with! I was a tedeter.”
       I at, encurned. A, my dook a


text generated by model after 2000 steps of training but I told him clearly, that if he reabsa deed some
seard us a heard his nevriept took’h myself and come against is need of Eaker, and terrised a clearly enoye


text generated by model after 3000 steps of training but I told him clearly, that if Right
then, who roronian had monting that I must settating you passion. Fut us contain him thion. Amy taken
and to sympent-litt


text generated by model after 4000 steps of training but I told him clearly, that if ears whet a
your smalls friend
      so.”

“And you? Scotling us in the ensetate on the stappered. “A stors, but which I work w


text generated by model after 5000 steps of training but I told him clearly, that if be whose give anches was for me to his many
wears the anyone? The back down of brought than answered, sir; “Sudden horror and c


text generated by model after 6000 steps of training but I told him clearly, that if he had telegreas.”

“Why I knew I have been examed.”

“Certails, he spetter lodge oppon the next opportmend in I. I skined it, 


text generated by model after 7000 steps of training but I told him clearly, that if the Dark, sharp_ and that
their repaudance with us a fearer with a largue down, “but the live night, Murch-Starter reading upon


text generated by model after 8000 steps of training but I told him clearly, that if you will
opens but I year?” said he. “That is near that shifted as into the canner life came.—This warning
friend that I had ca


text generated by model after 9000 steps of training but I told him clearly, that if I trauntion, that they are note too vellering keep of
their part, and there was help being upon us the whole was snicks when?”
-->
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li>OG blog by Karpathy <a href="https://karpathy.github.io/2015/05/21/rnn-effectiveness/">link</a></li>
<li>RNN torch documentation <a href="https://pytorch.org/docs/stable/generated/torch.nn.RNN.html#torch.nn.RNN">link</a></li>
<li>Karpathy 1hr lecture on recurennt networks <a href="https://www.youtube.com/watch?v=yCC09vCHzF8">link</a></li>
</ol>


</section>

 ]]></description>
  <category>rnns</category>
  <category>nlp</category>
  <category>seq-to-seq</category>
  <category>langauge-modelling</category>
  <guid>https://www.deepamminda.com/posts/rnns/01_rnns_basics.html</guid>
  <pubDate>Fri, 19 Jul 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Few Shot learning: Classify using few examples!</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://www.deepamminda.com/posts/few-shot-learning/prototype_networks.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>If you aren’t already familiar with it, few-shot learning (FSL) is an exciting concept in machine learning that focuses on training models to make accurate predictions or classifications when provided with only a very limited amount of labeled data for each category or class. Unlike traditional machine learning approaches that often require substantial labeled datasets for training, few-shot learning aims to address scenarios where acquiring such extensive labeled data is impractical or costly.</p>
<p>In few-shot learning, the model is trained to generalize effectively from a small number of examples (or shots) per category, allowing it to make predictions for new, unseen data points with confidence. This capability is particularly valuable in situations where data is scarce, and manual annotation is labor-intensive or expensive. Refer to [1] for an in-depth survey in this field.</p>
<p>In this blog, I’m going to show you how to implement a basic few-shot classification technique for text.</p>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p>Before we begin, let us familiarize ourselves with the correct terminology.</p>
<p>What characterizes FSL is having only a few examples at hand, for unseen classes, during inference. So basically we are showing the model only a few examples of a class which it may or may not have encountered during its pre-training before we make predictions using that model.</p>
<p><strong>Support Set, 𝒮:</strong> The few annotated examples that we have, make up the support set, with which we may or may not update the model weights to make it generalize to the new classes.</p>
<p><strong>Query Set, 𝒬:</strong> The query set consists of our test set, i.e.&nbsp;the samples we want to classify using the base model and a support set.</p>
<p><strong>N-way K-shot learning scheme:</strong> This is a common phrase used in the FSL literature, which essentially describes the few-shot problem statement that a model will be dealing with. “N” is the number of classes we have at test time and “K” is the number of samples per class we have in our support set “𝒮”</p>
<p><strong>1-shot classification:</strong> When K=1, i.e.&nbsp;we have only one labeled sample available per class.</p>
<p><strong>0-shot classification:</strong> K=0, i.e.&nbsp;we do not have any labeled samples available during inference.</p>
<p>Let us have a look at an example.</p>
<div id="cell-2" class="cell" data-execution_count="46">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample set is 3-way, 3-shot.</span></span>
<span id="cb1-2">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camera'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'battery'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display'</span>]</span>
<span id="cb1-3"></span>
<span id="cb1-4">sample_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camera'</span>: [</span>
<span id="cb1-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'absolutely love this quality of my photos!!'</span>,</span>
<span id="cb1-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'it even gives great quality in dim lighting. fabulous!!'</span>,</span>
<span id="cb1-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'the camera should be much better for such a high price'</span></span>
<span id="cb1-9">    ],</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'battery'</span>: [</span>
<span id="cb1-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The battery life on this device is exceptional! It easily lasts me the entire day with heavy usage."</span>,</span>
<span id="cb1-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm a bit disappointed with the battery performance. It drains quite quickly, especially when using power-hungry apps."</span>,</span>
<span id="cb1-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The battery is decent, not too bad, not too good. It gets me through the day, but I was hoping for better longevity."</span></span>
<span id="cb1-14">    ],</span>
<span id="cb1-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display'</span>: [</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The display on this device is stunning! Colors are vivid, and the resolution is top-notch."</span>,</span>
<span id="cb1-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm not too impressed with the display quality. It seems a bit washed out, and the brightness could be better."</span>,</span>
<span id="cb1-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The display is okay, but nothing extraordinary. It gets the job done for everyday tasks."</span></span>
<span id="cb1-19">    ]</span>
<span id="cb1-20">}</span>
<span id="cb1-21"></span>
<span id="cb1-22">query_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"does it give good quality photos in the night?"</span>]</span></code></pre></div>
</details>
</div>
<p>Here we have a 3-way (there are 3 classes), 3-shot (3 examples for each class) setting.</p>
</section>
<section id="high-level-design" class="level2">
<h2 class="anchored" data-anchor-id="high-level-design">High level design</h2>
<p>Let us have a quick look at the architecture of the system.</p>
<div id="few-shot" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://www.deepamminda.com/posts/few-shot-learning/1_few_shot_system.png" class="img-fluid figure-img"></p>
<figcaption>A simple few shot classification system</figcaption>
</figure>
</div>
<p>This is the flow of our solution:</p>
<p>The first step is to get an embedding module. That can be created using regular supervised learning (Resnets trained on Imagenet) or self-supervised learning (BERT and co). Then, we use the embedding module to get feature representations for our classes in the support set. A simple way to do this is to turn each class’s examples into embeddings and take the mean of those vectors. This then becomes our “prototype” vectors to compare against. Now for each query, we can take the embeddings of the query text and use cosine similarity to find the predicted class. This closely resembles This system basically allows us to leverage transfer learning to use large backbones as our embedding module. And there is also the advantage of not performing any gradient updates. This helps us maintain a much more dynamic and flexible system.</p>
<p>The idea of comparing query samples with the support set samples is inspired by metric learning. Refer to [3, 4] for better understanding.</p>
<p>Let’s implement this using the transformers library. You can find the implementation in this colab notebook.</p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>Let’s start with the good old BERT base model.</p>
<section id="import-libraries-and-download-model" class="level3">
<h3 class="anchored" data-anchor-id="import-libraries-and-download-model">1. Import libraries and download model</h3>
<div id="cell-4" class="cell" data-execution_count="47">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModel</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dict</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pprint <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pprint</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings </span>
<span id="cb2-7">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_available():</span>
<span id="cb2-10">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span>)</span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-12">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb2-13">    </span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the model and tokenizer</span></span>
<span id="cb2-15">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-uncased'</span>)</span>
<span id="cb2-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bert-base-uncased"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="tokenize-and-encode-a-sentence" class="level3">
<h3 class="anchored" data-anchor-id="tokenize-and-encode-a-sentence">2. Tokenize and encode a sentence</h3>
<div id="cell-6" class="cell" data-execution_count="71">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"He's such a great guy!!"</span></span>
<span id="cb3-2">encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb3-3">  text, </span>
<span id="cb3-4">  return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>, </span>
<span id="cb3-5">  padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True will pad to max-len in batch</span></span>
<span id="cb3-6">  max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"encoded input:"</span>)</span>
<span id="cb3-9">pprint(encoded_input)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>encoded input:
{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]]),
 'input_ids': tensor([[ 101, 2002, 1005, 1055, 2107, 1037, 2307, 3124,  999,  999,  102,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0]]),
 'token_type_ids': tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]])}</code></pre>
</div>
</div>
<p>where,</p>
<ul>
<li>input_ids: token id of each token</li>
<li>token_type_id: When we pass two sentences for downstream fine-tuning in BERT, this is used to identify which token belongs to which sentence.</li>
<li>attention_mask: which tokens to ignore. As you’ll see, the padding tokens have been masked.</li>
</ul>
</section>
<section id="generate-embeddings-using-model" class="level3">
<h3 class="anchored" data-anchor-id="generate-embeddings-using-model">3. Generate embeddings using model</h3>
<p>The output has 2 parts, <code>cls_token_embeddings</code> and <code>last_hidden_states</code> of the tokens. We can either use the cls_embeddings to represent the sentence or pool the vectors in last_hidden_states. The pooling can be max/min/mean.</p>
<p>The dimension of the output will be equal to the embedding dimension of the model, i.e.&nbsp;784 in our case.</p>
<div id="cell-8" class="cell" data-execution_count="60">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_embeddings(model, tokenizer, text, pooling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>):</span>
<span id="cb5-2">  </span>
<span id="cb5-3">  encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb5-4">    text, </span>
<span id="cb5-5">    return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>, </span>
<span id="cb5-6">    padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>, </span>
<span id="cb5-7">    max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, </span>
<span id="cb5-8">    truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-9">  )</span>
<span id="cb5-10">  encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_input.to(device)</span>
<span id="cb5-11"></span>
<span id="cb5-12">  model.to(device)</span>
<span id="cb5-13"></span>
<span id="cb5-14">  model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb5-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb5-16">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>encoded_input)</span>
<span id="cb5-17">    last_hidden_state, pooler_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-18">    </span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pooling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cls'</span>:</span>
<span id="cb5-20">      embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pooler_output</span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-22">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore the pad tokens embeddings by multiplying with attention mask</span></span>
<span id="cb5-23">      last_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (last_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> encoded_input[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_mask'</span>].unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-24">      embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last_hidden_state.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array(embedding.cpu())</span>
<span id="cb5-26"></span>
<span id="cb5-27"></span>
<span id="cb5-28">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hey there! how are you?'</span>)</span>
<span id="cb5-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"shape of embeddings: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>embeddings<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>shape of embeddings: (1, 768)</code></pre>
</div>
</div>
</section>
<section id="prepare-the-prototypes" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-prototypes">4. Prepare the prototypes:</h3>
<p>To prepare the class prototypes we’ll take the mean of the sentences for each class.</p>
<div id="cell-10" class="cell" data-execution_count="61">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_prototypes(model, tokenizer, sample_set: Dict):</span>
<span id="cb7-2">  prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-3">  sentence_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> category, sentences <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sample_set.items():</span>
<span id="cb7-5">    sentence_embeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, sentences)</span>
<span id="cb7-6">    sentence_embeddings[category] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_embeds</span>
<span id="cb7-7">    prototype_vectors[category] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sentence_embeddings[category], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prototype_vectors</span></code></pre></div>
</details>
</div>
</section>
<section id="classify" class="level3">
<h3 class="anchored" data-anchor-id="classify">5. Classify</h3>
<p>To classify a query text, we can run cosine similarity against the prototype vectors and return the argmax as the most probable class!</p>
<div id="cell-12" class="cell" data-execution_count="62">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> classify(model, tokenizer, text, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, sample_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb8-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-3">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> sample_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prototype vectors are not passed, either pass a sample set prototype vectors"</span></span>
<span id="cb8-4">      prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(sample_set)</span>
<span id="cb8-5"></span>
<span id="cb8-6">  query_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, text)</span>
<span id="cb8-7">  </span>
<span id="cb8-8">  prototype_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(prototype_vectors.values()))</span>
<span id="cb8-9">  scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_transformers.util.cos_sim(query_embeddings, prototype_matrix)</span>
<span id="cb8-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> scores</span></code></pre></div>
</details>
</div>
<p>Using the above-defined functions and the sample set from before, we have:</p>
<div id="cell-14" class="cell" data-execution_count="65">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(model, tokenizer, sample_set)</span>
<span id="cb9-2">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span></span>
<span id="cb9-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model, tokenizer, query_text, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.6121, 0.7127, 0.6388]])
the predicted class is battery</code></pre>
</div>
</div>
<p>A bit strange! Although the expected class is predicted, scores for other classes are also high. Let’s try a harder query.</p>
<div id="cell-16" class="cell" data-execution_count="66">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'does it give good quality photos in the night?'</span>]</span>
<span id="cb11-2">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model, tokenizer, query, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.7984, 0.7043, 0.7647]])
the predicted class is camera</code></pre>
</div>
</div>
<p>Although the highest similarity is for ‘camera’, the similarity should be much higher.</p>
<p>The results do not get better even if we try cls-pooling. This only means that the embeddings produced by the model do not give us an accurate representation of the sentence.</p>
<p>We would then do good to remember that BERT pre-train was trained by MaskedLM, NextSentencePrediction, hence the original purpose of BERT is not to create a meaningful embedding of the sentence but for some specific downstream task. In fact, as the authors of the sentence-transformer paper [2] point out, out-of-the-box Bert embeddings perform even worse than GLoVE representations!</p>
<blockquote class="blockquote">
<p>Jacob Devlin’s comment: I’m not sure what these vectors are, since BERT does not generate meaningful sentence vectors. It seems that this is is doing average pooling over the word tokens to get a sentence vector, but we never suggested that this will generate meaningful sentence representations. And even if they are decent representations when fed into a DNN trained for a downstream task, it doesn’t mean that they will be meaningful in terms of cosine distance. (Since cosine distance is a linear space where all dimensions are weighted equally).</p>
</blockquote>
<p>There are a few ways to improve the bert-base for sentence-level tasks and both involve finetuning the model with some data.</p>
<ul>
<li>adding a linear layer on top and fine-tuning it.</li>
<li>making embeddings better by contrastive learning.</li>
</ul>
</section>
</section>
<section id="using-sentence-transformers" class="level2">
<h2 class="anchored" data-anchor-id="using-sentence-transformers">Using sentence transformers</h2>
<p>Ultimately, what we need is a better embedding module. Luckily we have such models. As it turns out, contrastive learning is an excellent approach for tuning our models such that different sentences produce semantically different embeddings.</p>
<p>We will explore contrastive learning and its inner workings some other day, but for now, let’s pick up open-source models that have been finetuned using contrastive learning. There is an entire library (aka sentence-transformers) and paper[2] dedicated to this.</p>
<p>We’ll use the <code>sentence-transformers/stsb-bert-base</code> model for our purposes.</p>
<section id="import-packages-and-download-model" class="level3">
<h3 class="anchored" data-anchor-id="import-packages-and-download-model">1. Import packages and download model</h3>
<div id="cell-18" class="cell" data-execution_count="55">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load a sentence transformer model</span></span>
<span id="cb13-4">sts_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence-transformers/stsb-bert-base'</span>)</span>
<span id="cb13-5">model2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sts_model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].auto_model.to(device)</span>
<span id="cb13-6">tokenizer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sts_model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tokenizer</span></code></pre></div>
</details>
</div>
</section>
<section id="use-the-above-defined-functions-to-prepare-prototype-vectors-and-classify-them-in-a-few-shot-setting" class="level3">
<h3 class="anchored" data-anchor-id="use-the-above-defined-functions-to-prepare-prototype-vectors-and-classify-them-in-a-few-shot-setting">2. Use the above-defined functions to prepare prototype vectors and classify them in a few-shot setting</h3>
<div id="cell-20" class="cell" data-execution_count="67">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(model2, tokenizer2, sample_set)</span>
<span id="cb14-2">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span></span>
<span id="cb14-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model2, tokenizer2, query_text, prototype_vectors)</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.0910, 0.4780, 0.1606]])
the predicted class is battery</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="68">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'does it give good quality photos in the night?'</span>]</span>
<span id="cb16-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model2, tokenizer2, query, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.4467, 0.1012, 0.2998]])
the predicted class is camera</code></pre>
</div>
</div>
<p>As we can see, the scores seem much more reasonable this time around. There is a much better correlation with the ground truth labels. Using better base models trained in multiple tasks further improves the performance of these models.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This brings us to the end of this blog. In summary, we explored the realm of few-shot learning, a machine-learning approach tailored for accurate predictions with limited labeled data. Initially, we employed BERT, but its design didn’t align with our objectives. Instead, we leveraged a model fine-tuned for sentence-level tasks, <code>sentence-transformers/stsb-bert-base</code>, which significantly improved our results.</p>
<p><strong>These are a few things to note:</strong></p>
<p>Although we directly used pre-trained models here, an interesting undertaking would be to perform the contrastive fine-tuning ourselves. Also, instead of using cosine similarity, we can train lightweight classifiers on top of our embedding module for better performance.</p>
<p>That’ll be all from my side. Until next time, Happy Reading!</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1] <a href="https://arxiv.org/pdf/1904.05046.pdf">Survey paper on few-shot learning</a></p>
<p>[2] <a href="https://arxiv.org/pdf/1908.10084.pdf">Sentence-Bert paper</a></p>
<p>[3] <a href="https://proceedings.neurips.cc/paper_files/paper/2017/file/cb8da6767461f2812ae4290eac7cbc42-Paper.pdf">Prototypical Networks</a></p>
<p>[4] <a href="https://lilianweng.github.io/posts/2018-11-30-meta-learning/#metric-based">Excellent much more techincal blog by Lilian Weng</a></p>


</section>

 ]]></description>
  <category>classification</category>
  <category>few-shot learning</category>
  <category>nlp</category>
  <guid>https://www.deepamminda.com/posts/few-shot-learning/prototype_networks.html</guid>
  <pubDate>Mon, 11 Sep 2023 18:30:00 GMT</pubDate>
  <media:content url="https://www.deepamminda.com/posts/few-shot-learning/cover.jpeg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
