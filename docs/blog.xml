<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deepamminda</title>
<link>https://www.deepamminda.com/blog.html</link>
<atom:link href="https://www.deepamminda.com/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.53</generator>
<lastBuildDate>Fri, 19 Jul 2024 18:30:00 GMT</lastBuildDate>
<item>
  <title>Language Modelling with RNNs</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://www.deepamminda.com/posts/rnns/01_rnns_from_scratch.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The only reason you would be hearing RNNs right now is probably when <a href="https://arxiv.org/pdf/2405.04517">xLSTMs</a> were released in May, 2024. Apart from this they have pretty much taken a back seat to watch transformers revolutionalize NLP and the entire field of AI in general.</p>
<p>But one would do well to remember how we got here, and RNNs played a massive role in bringing us here. So in this blog post I’m going to build a small RNN model and we’ll try to train it to generate text.</p>
</section>
<section id="import-data-and-process-it" class="level1">
<h1>Import data and process it</h1>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span></code></pre></div>
</div>
<p>Let us load a text dataset. I downloaded a few mystery books and concatenated their raw text to make the dataset. Follow <a href="https://github.com/mindadeepam/mindadeepam.github.io/blob/posts/posts/rnns/corpus.txt">this</a> link to get the text file.</p>
<div id="cell-6" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./corpus.txt"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dataset_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-4">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span></code></pre></div>
</div>
<p>Lets have a look at some of the text we have.</p>
<div id="cell-8" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sample data chunk:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Sample data chunk:
'rld has seen, but as a lover he would have placed himself in a
false position. He never spoke of the softer passions, save with a gibe
and a sneer. They were admirable things for the observer—excellent for
drawing the veil from men’s motives and actions. But for the trained
reasoner to admit such intrusions into his own delicate and finely
adjusted temperament was to introduce a distracting factor which might
throw a doubt upon all his mental results. Grit in a sensitive
instrument, or a crack i'</code></pre>
</div>
</div>
<p>Lets split the data into train and test (80-20)</p>
<div id="cell-10" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb5-2">train_data, test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[:train_size], data[train_size:]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  (in number of tokens)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train_size: 2449724, test_size: 612431  (in number of tokens)</code></pre>
</div>
</div>
<p>Now let us encode the text to numerical data that our model can understand. Encoding the data generally means tokenization and then encoding. To keep it super simple, we’ll just use individual characters as tokens.</p>
<p>Nowadays however, subword <a href="(https://huggingface.co/docs/transformers/main/en/tokenizer_summary)">tokenization algorithms</a> like Byte-Pair Encoding are the norm. But let us not get caught up in those for now.</p>
<div id="cell-12" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the vocabulary and special tokens</span></span>
<span id="cb7-2">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(train_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12345678910qwertyuioplkjhgfdsamnbvcxz~!@#$%^&amp;*()_+`-=[];'./,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:?&gt;&lt;\|"</span>))</span>
<span id="cb7-3">PAD_TOKEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;pad&gt;'</span></span>
<span id="cb7-4">special_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [PAD_TOKEN]</span>
<span id="cb7-5">MAX_SEQ_LEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>special_tokens, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vocab]</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create mappings for encoding and decoding</span></span>
<span id="cb7-10">decode_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vocab))</span>
<span id="cb7-11">encode_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v:k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> decode_mapping.items()}</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define encoding and decoding functions</span></span>
<span id="cb7-14">encode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> text: [encode_mapping[char] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> text]</span>
<span id="cb7-15">decode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> text: [decode_mapping[char] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> text]</span></code></pre></div>
</div>
<p>Now we can do a simple sanity check by encoding a text and decoding it. we should get the original string back.</p>
<div id="cell-14" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hey there"</span></span>
<span id="cb8-2">encoded_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode(text)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"original text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tokenized text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'encoded text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>encoded_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"decoded back:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>decode(encoded_text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>original text: hey there
tokenized text: ['h', 'e', 'y', ' ', 't', 'h', 'e', 'r', 'e']
encoded text: [49, 40, 24, 85, 74, 49, 40, 57, 40]
decoded back:['h', 'e', 'y', ' ', 't', 'h', 'e', 'r', 'e']</code></pre>
</div>
</div>
<p>Now we need functions that will do this for batches of texts rather than single text. When dealing with batches, there are a few extra considerations: - You would typically want your batches to contain texts which are of same length, so that matrix/tensor operations can be performed. Hence we need to truncate longer sentences and pad shorter sentences to a fixed length.</p>
<p>For simplicity let us also define a function that will fetch us a random batch of data from our training set.</p>
<div id="cell-18" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_data(data, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>):</span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Retrieves input and target data for training a recurrent neural network (RNN).</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        data (list): The input data.</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        batch_size (int, optional): The number of sequences in each batch. Defaults to 16.</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        seq_len (int, optional): The length of each sequence. Defaults to 256.</span></span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the input and target data tensors.</span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - inputs (torch.Tensor): The input data tensor.</span></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - targets (torch.Tensor): The target data tensor.</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb10-16">    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span>
<span id="cb10-17">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size)</span>
<span id="cb10-18">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len</span>
<span id="cb10-19">    texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [data[s:e] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(start, end)]</span>
<span id="cb10-20">    </span>
<span id="cb10-21">    encoded_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode_arr(texts, max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-22">    targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_texts[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb10-23">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_texts[:, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-24">    </span>
<span id="cb10-25">    targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(targets, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb10-26">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(inputs, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb10-27">    </span>
<span id="cb10-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inputs, targets</span>
<span id="cb10-29"></span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target is just x shifted one token to the left!"</span>)</span>
<span id="cb11-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x[0]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">y[0] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>target is just x shifted one token to the left!
x[0]: tensor([  0,  29,  60,  85,  88,  40,  40,  21,  86,  74,  49,  40,  25,  57,
         85,  43,  88,  20,  40, 109,  74,  85,  65]),
y[0] tensor([ 29,  60,  85,  88,  40,  40,  21,  86,  74,  49,  40,  25,  57,  85,
         43,  88,  20,  40, 109,  74,  85,  65,  57])</code></pre>
</div>
</div>
</section>
<section id="rnns" class="level1">
<h1>RNNS</h1>
<p>Now before modelling, let us look at a RNN layer and understand its input and outputs. Each RNN layer has the following basic archtecture:</p>
<div id="fig-unrolled-rnn" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-unrolled-rnn-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.deepamminda.com/posts/rnns/rnn_unrolled.png" style="width:70.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-unrolled-rnn-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: unrolled RNN
</figcaption>
</figure>
</div>
<section id="understanding-rnns" class="level2">
<h2 class="anchored" data-anchor-id="understanding-rnns">Understanding RNNs</h2>
<p>RNNs have 2 matrices, one (<img src="https://latex.codecogs.com/png.latex?W_%7Bxh%7D">) that maps input tokens to hidden_vector size and another (<img src="https://latex.codecogs.com/png.latex?W_%7Bhh%7D">) that maps from hidden_vector to hidden_vector. You’ll see how these are used in a minute.</p>
<p>Let us first look at input-output shapes for an RNN layer. We initially had a batch of text-tokens. Lets assume batch size of 4 and max_seq_len of 32. Hence the shape of input is (4,32).</p>
<p>Now for each token, we encode it to a number and then map it to a vector (which we generally call an embedding). Hence each token is now represented by a vector of fixed-shape, and lets call this embedding_dimension and set it to 10.</p>
<p>The shape of our input batch is now (batch_size, max_seq_len, emb_dim), ie (4,32,10).</p>
<p>Now let us peek into the matrix multiplications inside a RNN layer. Firstly, lets us recall that for a linear layer, this is the matrix equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?z%20(N,%20n_%7Bout%7D)%20=%20%5Csigma(x%20(N,%20n_%7Bin%7D)%20*%20W_x%5ET%20(n_%7Bin%7D,%20n_%7Bout%7D)%20+%20b%20(N))"></p>
<p>where ,</p>
<ul>
<li>input-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bin%7D"></li>
<li>output-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bout%7D"></li>
<li>batch-size = <img src="https://latex.codecogs.com/png.latex?N"></li>
</ul>
<p>In a linear layer, each token/feature is attended to by a different weight in the weight matrix and no information is shared among the sequence tokens. But when processing “sequences” we obviously want the model to remember stuff from previous tokens for the current token, right?</p>
<p>Hence RNNs maintain a hidden_vector for each token, that takes as input the current token and the hidden_vector from the previous token’s output.</p>
<p>So for the <img src="https://latex.codecogs.com/png.latex?t">’th token,</p>
<p><img src="https://latex.codecogs.com/png.latex?h_t%20(N,%20h)=%20x_t%20(N,%20n_%7Bin%7D)%20*%20W_%7Bxh%7D%5ET%20(n_%7Bin%7D,%20h)%20+%20h_%7Bt-1%7D%20(N,%20h)%20*%20W_%7Bhh%7D%5ET%20(h,%20h)%20+%20biases"></p>
<p>where</p>
<ul>
<li>input-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bin%7D"></li>
<li>hidden-size = <img src="https://latex.codecogs.com/png.latex?h"></li>
<li>batch-size = <img src="https://latex.codecogs.com/png.latex?N"></li>
<li>sequence-length = <img src="https://latex.codecogs.com/png.latex?s"></li>
</ul>
<p>As you’ll notice since each token depends on previous tokens output, we cannot process this parallelly and have to iteratively calculate the output for each token. Also note we generally refer to the different tokens in a sequence as different timesteps, ie token at timestep t is <img src="https://latex.codecogs.com/png.latex?x_t">.</p>
<p>Hence for a complete batch, inputs are:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?X"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20n_%7Bin%7D)"></li>
<li><img src="https://latex.codecogs.com/png.latex?h_0"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20h)"> (this is optional, if not given most libraries will initiate a <img src="https://latex.codecogs.com/png.latex?h_0"> of all zeros or random numbers)</li>
</ul>
<p>And outputs are:</p>
<ul>
<li>hidden states of all timesteps, ie <img src="https://latex.codecogs.com/png.latex?H"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20h)"></li>
<li>last_hidden_state ie <img src="https://latex.codecogs.com/png.latex?h_n"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20h)"></li>
</ul>
<p>Note: sometimes you will see outputs of rnn fed into a linear layer like so,</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">outputs, h_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(x)</span>
<span id="cb13-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc(outputs[:,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:])</span></code></pre></div>
<p>Here <code>h_n</code> and <code>outputs[:,-1,:]</code> are the same thing. They both represent the last hidden state for the entire batch. (to make shapes equal use <code>h_n.squeeze()</code>)</p>
<p>Lets verify the above by passing inputs to an rnn layer.</p>
<div id="cell-23" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">emb_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb14-2">hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb14-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb14-4">max_seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"batch_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, hidden_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hidden_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, max_seq_len: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_seq_len<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, emb_dim: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>emb_dim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-7">X,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_seq_len, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size)</span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"shape of initial input -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10">emb_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(num_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab), embedding_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb_dim)</span>
<span id="cb14-11">rnn_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.RNN(input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb_dim, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hidden_size, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bidirectional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-12"></span>
<span id="cb14-13">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_layer(X)</span>
<span id="cb14-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"post embedding; shape of input to RNN layer -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-15">h_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, batch_size, hidden_size)</span>
<span id="cb14-16">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnn_layer(X, h_0)</span>
<span id="cb14-17"></span>
<span id="cb14-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"RNN output shapes -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>[outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].shape <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>batch_size: 4, hidden_size: 100, max_seq_len: 256, emb_dim: 50
shape of initial input -&gt; torch.Size([4, 256])
post embedding; shape of input to RNN layer -&gt; torch.Size([4, 256, 50])
RNN output shapes -&gt; torch.Size([4, 256, 100]), [torch.Size([4, 100])]</code></pre>
</div>
</div>
</section>
</section>
<section id="language-modelling" class="level1">
<h1>Language Modelling</h1>
<p>Now let us build a model and train it. For starters we’ll just use a <a href="https://pytorch.org/docs/stable/generated/torch.nn.RNN.html#torch.nn.RNN">torch.nn.RNN</a> layer to build the model and train it. Once we get the entire training and testing pipeline complete, we can come back and build the model from scratch.</p>
<section id="how-exactly-can-we-generate-text-though" class="level3">
<h3 class="anchored" data-anchor-id="how-exactly-can-we-generate-text-though">How exactly can we generate text though?</h3>
<p>We know we can get hidden states of the entire sequence as outputs from a rnn layer, but each hidden state <img src="https://latex.codecogs.com/png.latex?h_t"> has ponly seen information till timestep <img src="https://latex.codecogs.com/png.latex?t">. What we can do is this:</p>
<ul>
<li>only use the last hidden state and feed it to a linear layer with output shape equal to size of vocabulary.</li>
<li>if softmax is applied on top of the linear layer’s output, it turns raw logits into the probabilities for different tokens in our vocab. This can be done outside the forward function too.</li>
</ul>
<p>Now each input sequence gives us one output token ie <img src="https://latex.codecogs.com/png.latex?y_%7Bt+1%7D">. then we can take the sequence from <img src="https://latex.codecogs.com/png.latex?1"> to <img src="https://latex.codecogs.com/png.latex?t+1"> and generate token <img src="https://latex.codecogs.com/png.latex?y_%7Bt+2%7D">.</p>
</section>
<section id="during-training" class="level3">
<h3 class="anchored" data-anchor-id="during-training">During Training</h3>
<p>To maximize training we can use all hidden state outputs instead of the last one. Because why wouldnt we want the model to learn from all its outputs!</p>
<ul>
<li>output of rnn layer of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20h)"> is fed into a linear layer of shape <img src="https://latex.codecogs.com/png.latex?(h,%20vocab%5C_size)"> to get <img src="https://latex.codecogs.com/png.latex?(N,s,vocab%5C_size)"> outputs. then we can pass them via softmax and apply cross-entropy loss on all of them and backpropagate through the model.</li>
<li>since at token level we now have <img src="https://latex.codecogs.com/png.latex?N*s"> tokens on which we will calculate loss, its simpler to flatten the targets and generated logits before passing to cross-entropy loss.</li>
</ul>
<p>Note: Had it been a classification task, we could just pass last hidden_state, <img src="https://latex.codecogs.com/png.latex?h_n"> to a linear layer with output size equal to number of classes.</p>
</section>
<section id="the-model" class="level2">
<h2 class="anchored" data-anchor-id="the-model">The model</h2>
<div id="cell-26" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Rnn_model(nn.Module):</span>
<span id="cb16-2"></span>
<span id="cb16-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, embedding_size, max_seq_len, hidden_size, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vocab_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb16-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the Rnn_model class.</span></span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            embedding_size (int): The size of the embedding dimension.</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            max_seq_len (int): The maximum sequence length.</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            hidden_size (int): The size of the hidden state dimension.</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            num_layers (int, optional): The number of recurrent layers. Defaults to 1.</span></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            vocab_size (int, optional): The size of the vocabulary. Defaults to None.</span></span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb16-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Rnn_model, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb16-16"></span>
<span id="cb16-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_seq_len</span>
<span id="cb16-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vocab_size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> vocab_size</span>
<span id="cb16-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(num_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size, embedding_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embedding_size)</span>
<span id="cb16-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.RNN(input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embedding_size, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hidden_size, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_layers)</span>
<span id="cb16-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab))</span>
<span id="cb16-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.softmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Softmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss(ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore pad token</span></span>
<span id="cb16-24"></span>
<span id="cb16-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb16-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" </span></span>
<span id="cb16-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a forward pas thorugh the model.</span></span>
<span id="cb16-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x: input torch tensor (B,T,S)</span></span>
<span id="cb16-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        targets: input targets (B,T,S)</span></span>
<span id="cb16-30"></span>
<span id="cb16-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb16-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        (model output logits, loss)</span></span>
<span id="cb16-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb16-34">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len:]</span>
<span id="cb16-35">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding(x)</span>
<span id="cb16-36">        H, h_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(x)</span>
<span id="cb16-37"></span>
<span id="cb16-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y = self.fc(H[:,-1,:])</span></span>
<span id="cb16-39">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc(H)</span>
<span id="cb16-40">        </span>
<span id="cb16-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb16-42">            B, T, V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.shape</span>
<span id="cb16-43">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion(y.view(B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T, V), targets.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb16-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb16-45">        </span>
<span id="cb16-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y, loss</span>
<span id="cb16-47">    </span>
<span id="cb16-48">    </span>
<span id="cb16-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span></span>
<span id="cb16-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_text, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>):</span>
<span id="cb16-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" </span></span>
<span id="cb16-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        input_text: a string or list of strings to generate text using the model.</span></span>
<span id="cb16-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_len: model will generate maximum of max_len tokens.</span></span>
<span id="cb16-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb16-55">        encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(encode_arr([input_text], max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>))</span>
<span id="cb16-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> encoded_tokens.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb16-57">            encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_tokens.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-58"></span>
<span id="cb16-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_len):</span>
<span id="cb16-60">            outputs, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>(encoded_tokens[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len:])</span>
<span id="cb16-61"></span>
<span id="cb16-62">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last output token</span></span>
<span id="cb16-63">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :]</span>
<span id="cb16-64"></span>
<span id="cb16-65">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get pribabilities from logits</span></span>
<span id="cb16-66">            next_token_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.functional.softmax(outputs, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-67"></span>
<span id="cb16-68">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample indices from it using a multinomial distribution</span></span>
<span id="cb16-69">            next_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(next_token_probs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-70"></span>
<span id="cb16-71">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat prediction to original text</span></span>
<span id="cb16-72">            encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat((encoded_tokens, next_tokens), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-73"></span>
<span id="cb16-74">        decoded_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decode_arr(encoded_tokens)</span>
<span id="cb16-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(decoded_texts)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb16-76">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> decoded_texts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#.replace("&lt;pad&gt;", "") </span></span>
<span id="cb16-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb16-78">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return [text.replace("&lt;pad&gt;", "") for text in decoded_texts]</span></span>
<span id="cb16-79">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> decoded_texts</span></code></pre></div>
</div>
</section>
<section id="training-loop" class="level2">
<h2 class="anchored" data-anchor-id="training-loop">Training loop</h2>
<div id="cell-28" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">NUM_STEPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb17-2">MAX_SEQ_LEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb17-3">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb17-4">EMBEDDING_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb17-5">HIDDEN_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb17-6">NUM_LAYERS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-7">LR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> </span>
<span id="cb17-8">log_every <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb17-9"></span>
<span id="cb17-10">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Rnn_model(embedding_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>EMBEDDING_SIZE, max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MAX_SEQ_LEN, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HIDDEN_SIZE, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NUM_LAYERS)</span>
<span id="cb17-11">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LR)</span>
<span id="cb17-12">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_STEPS):</span>
<span id="cb17-14">    optimizer.zero_grad()</span>
<span id="cb17-15">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, BATCH_SIZE, MAX_SEQ_LEN)</span>
<span id="cb17-16">    outputs, loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x, y)</span>
<span id="cb17-17">    loss.backward()</span>
<span id="cb17-18">    optimizer.step()</span>
<span id="cb17-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>log_every<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-20">        losses.append(loss)</span>
<span id="cb17-21"></span>
<span id="cb17-22">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [loss.detach().numpy().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> losses] </span>
<span id="cb17-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(losses[::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[4.739927291870117, 2.7914414405822754, 2.4784317016601562, 2.2333602905273438, 2.134639263153076, 2.089491844177246, 1.9503958225250244]</code></pre>
</div>
</div>
<div id="cell-29" class="cell" data-execution_count="97">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot losses</span></span>
<span id="cb19-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb19-3">plt.plot(losses)</span>
<span id="cb19-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Loss"</span>)</span>
<span id="cb19-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Steps"</span>)</span>
<span id="cb19-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="97">
<pre><code>Text(0, 0.5, 'Loss')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.deepamminda.com/posts/rnns/01_rnns_from_scratch_files/figure-html/cell-15-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>sqitching from SGD to adam instantly gives boost (2.8 vs under 2)</li>
<li>tripling the data gave no gains on 50k basic rnn model!</li>
</ul>
<p>Lets look at some outputs from the model.</p>
<div id="cell-32" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.generate([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hey there handsome what"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I recall "</span>]):</span>
<span id="cb21-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(line.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;pad&gt;"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>hey there handsome whath in this
sestarescent, it be
mn
I recall ans haO,
yeu, am intandrery yp i</code></pre>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="50">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate size of model parameters</span></span>
<span id="cb23-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> count_parameters(model):</span>
<span id="cb23-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p.requires_grad)</span>
<span id="cb23-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"paramter count of the model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count_parameters(model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>paramter count of the model: 17220</code></pre>
</div>
</div>
<p>The results dont make much sense, but the model is learning to generate text. By scaling the model and training for longer, we can get better results.</p>
<p>Thank you for reading this and I hope you found it useful. The next time I update this blog post, I’ll be adding the following:</p>
<ul>
<li>Evaluation on test set (metrics like perplexity).</li>
<li>Implementing RNN, LSTM and GRU from scratch.</li>
</ul>
<p>Byee :)</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://karpathy.github.io/2015/05/21/rnn-effectiveness/">OG blog by Karpathy</a></li>
<li><a href="https://pytorch.org/docs/stable/generated/torch.nn.RNN.html#torch.nn.RNN">RNN torch documentation</a></li>
</ol>


</section>

 ]]></description>
  <category>rnns</category>
  <category>nlp</category>
  <category>seq-to-seq</category>
  <category>langauge-modelling</category>
  <guid>https://www.deepamminda.com/posts/rnns/01_rnns_from_scratch.html</guid>
  <pubDate>Fri, 19 Jul 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Few Shot learning: Classify using few examples!</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://www.deepamminda.com/posts/few-shot-learning/prototype_networks.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>If you aren’t already familiar with it, few-shot learning (FSL) is an exciting concept in machine learning that focuses on training models to make accurate predictions or classifications when provided with only a very limited amount of labeled data for each category or class. Unlike traditional machine learning approaches that often require substantial labeled datasets for training, few-shot learning aims to address scenarios where acquiring such extensive labeled data is impractical or costly.</p>
<p>In few-shot learning, the model is trained to generalize effectively from a small number of examples (or shots) per category, allowing it to make predictions for new, unseen data points with confidence. This capability is particularly valuable in situations where data is scarce, and manual annotation is labor-intensive or expensive. Refer to [1] for an in-depth survey in this field.</p>
<p>In this blog, I’m going to show you how to implement a basic few-shot classification technique for text.</p>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p>Before we begin, let us familiarize ourselves with the correct terminology.</p>
<p>What characterizes FSL is having only a few examples at hand, for unseen classes, during inference. So basically we are showing the model only a few examples of a class which it may or may not have encountered during its pre-training before we make predictions using that model.</p>
<p><strong>Support Set, 𝒮:</strong> The few annotated examples that we have, make up the support set, with which we may or may not update the model weights to make it generalize to the new classes.</p>
<p><strong>Query Set, 𝒬:</strong> The query set consists of our test set, i.e.&nbsp;the samples we want to classify using the base model and a support set.</p>
<p><strong>N-way K-shot learning scheme:</strong> This is a common phrase used in the FSL literature, which essentially describes the few-shot problem statement that a model will be dealing with. “N” is the number of classes we have at test time and “K” is the number of samples per class we have in our support set “𝒮”</p>
<p><strong>1-shot classification:</strong> When K=1, i.e.&nbsp;we have only one labeled sample available per class.</p>
<p><strong>0-shot classification:</strong> K=0, i.e.&nbsp;we do not have any labeled samples available during inference.</p>
<p>Let us have a look at an example.</p>
<div id="cell-2" class="cell" data-execution_count="46">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample set is 3-way, 3-shot.</span></span>
<span id="cb1-2">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camera'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'battery'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display'</span>]</span>
<span id="cb1-3"></span>
<span id="cb1-4">sample_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camera'</span>: [</span>
<span id="cb1-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'absolutely love this quality of my photos!!'</span>,</span>
<span id="cb1-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'it even gives great quality in dim lighting. fabulous!!'</span>,</span>
<span id="cb1-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'the camera should be much better for such a high price'</span></span>
<span id="cb1-9">    ],</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'battery'</span>: [</span>
<span id="cb1-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The battery life on this device is exceptional! It easily lasts me the entire day with heavy usage."</span>,</span>
<span id="cb1-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm a bit disappointed with the battery performance. It drains quite quickly, especially when using power-hungry apps."</span>,</span>
<span id="cb1-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The battery is decent, not too bad, not too good. It gets me through the day, but I was hoping for better longevity."</span></span>
<span id="cb1-14">    ],</span>
<span id="cb1-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display'</span>: [</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The display on this device is stunning! Colors are vivid, and the resolution is top-notch."</span>,</span>
<span id="cb1-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm not too impressed with the display quality. It seems a bit washed out, and the brightness could be better."</span>,</span>
<span id="cb1-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The display is okay, but nothing extraordinary. It gets the job done for everyday tasks."</span></span>
<span id="cb1-19">    ]</span>
<span id="cb1-20">}</span>
<span id="cb1-21"></span>
<span id="cb1-22">query_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"does it give good quality photos in the night?"</span>]</span></code></pre></div>
</details>
</div>
<p>Here we have a 3-way (there are 3 classes), 3-shot (3 examples for each class) setting.</p>
</section>
<section id="high-level-design" class="level2">
<h2 class="anchored" data-anchor-id="high-level-design">High level design</h2>
<p>Let us have a quick look at the architecture of the system.</p>
<div id="few-shot" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://www.deepamminda.com/posts/few-shot-learning/1_few_shot_system.png" class="img-fluid figure-img"></p>
<figcaption>A simple few shot classification system</figcaption>
</figure>
</div>
<p>This is the flow of our solution:</p>
<p>The first step is to get an embedding module. That can be created using regular supervised learning (Resnets trained on Imagenet) or self-supervised learning (BERT and co). Then, we use the embedding module to get feature representations for our classes in the support set. A simple way to do this is to turn each class’s examples into embeddings and take the mean of those vectors. This then becomes our “prototype” vectors to compare against. Now for each query, we can take the embeddings of the query text and use cosine similarity to find the predicted class. This closely resembles This system basically allows us to leverage transfer learning to use large backbones as our embedding module. And there is also the advantage of not performing any gradient updates. This helps us maintain a much more dynamic and flexible system.</p>
<p>The idea of comparing query samples with the support set samples is inspired by metric learning. Refer to [3, 4] for better understanding.</p>
<p>Let’s implement this using the transformers library. You can find the implementation in this colab notebook.</p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>Let’s start with the good old BERT base model.</p>
<section id="import-libraries-and-download-model" class="level3">
<h3 class="anchored" data-anchor-id="import-libraries-and-download-model">1. Import libraries and download model</h3>
<div id="cell-4" class="cell" data-execution_count="47">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModel</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dict</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pprint <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pprint</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings </span>
<span id="cb2-7">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_available():</span>
<span id="cb2-10">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span>)</span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-12">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb2-13">    </span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the model and tokenizer</span></span>
<span id="cb2-15">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-uncased'</span>)</span>
<span id="cb2-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bert-base-uncased"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="tokenize-and-encode-a-sentence" class="level3">
<h3 class="anchored" data-anchor-id="tokenize-and-encode-a-sentence">2. Tokenize and encode a sentence</h3>
<div id="cell-6" class="cell" data-execution_count="71">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"He's such a great guy!!"</span></span>
<span id="cb3-2">encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb3-3">  text, </span>
<span id="cb3-4">  return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>, </span>
<span id="cb3-5">  padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True will pad to max-len in batch</span></span>
<span id="cb3-6">  max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"encoded input:"</span>)</span>
<span id="cb3-9">pprint(encoded_input)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>encoded input:
{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]]),
 'input_ids': tensor([[ 101, 2002, 1005, 1055, 2107, 1037, 2307, 3124,  999,  999,  102,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0]]),
 'token_type_ids': tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]])}</code></pre>
</div>
</div>
<p>where,</p>
<ul>
<li>input_ids: token id of each token</li>
<li>token_type_id: When we pass two sentences for downstream fine-tuning in BERT, this is used to identify which token belongs to which sentence.</li>
<li>attention_mask: which tokens to ignore. As you’ll see, the padding tokens have been masked.</li>
</ul>
</section>
<section id="generate-embeddings-using-model" class="level3">
<h3 class="anchored" data-anchor-id="generate-embeddings-using-model">3. Generate embeddings using model</h3>
<p>The output has 2 parts, <code>cls_token_embeddings</code> and <code>last_hidden_states</code> of the tokens. We can either use the cls_embeddings to represent the sentence or pool the vectors in last_hidden_states. The pooling can be max/min/mean.</p>
<p>The dimension of the output will be equal to the embedding dimension of the model, i.e.&nbsp;784 in our case.</p>
<div id="cell-8" class="cell" data-execution_count="60">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_embeddings(model, tokenizer, text, pooling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>):</span>
<span id="cb5-2">  </span>
<span id="cb5-3">  encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb5-4">    text, </span>
<span id="cb5-5">    return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>, </span>
<span id="cb5-6">    padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>, </span>
<span id="cb5-7">    max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, </span>
<span id="cb5-8">    truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-9">  )</span>
<span id="cb5-10">  encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_input.to(device)</span>
<span id="cb5-11"></span>
<span id="cb5-12">  model.to(device)</span>
<span id="cb5-13"></span>
<span id="cb5-14">  model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb5-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb5-16">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>encoded_input)</span>
<span id="cb5-17">    last_hidden_state, pooler_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-18">    </span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pooling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cls'</span>:</span>
<span id="cb5-20">      embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pooler_output</span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-22">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore the pad tokens embeddings by multiplying with attention mask</span></span>
<span id="cb5-23">      last_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (last_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> encoded_input[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_mask'</span>].unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-24">      embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last_hidden_state.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array(embedding.cpu())</span>
<span id="cb5-26"></span>
<span id="cb5-27"></span>
<span id="cb5-28">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hey there! how are you?'</span>)</span>
<span id="cb5-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"shape of embeddings: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>embeddings<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>shape of embeddings: (1, 768)</code></pre>
</div>
</div>
</section>
<section id="prepare-the-prototypes" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-prototypes">4. Prepare the prototypes:</h3>
<p>To prepare the class prototypes we’ll take the mean of the sentences for each class.</p>
<div id="cell-10" class="cell" data-execution_count="61">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_prototypes(model, tokenizer, sample_set: Dict):</span>
<span id="cb7-2">  prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-3">  sentence_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> category, sentences <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sample_set.items():</span>
<span id="cb7-5">    sentence_embeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, sentences)</span>
<span id="cb7-6">    sentence_embeddings[category] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_embeds</span>
<span id="cb7-7">    prototype_vectors[category] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sentence_embeddings[category], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prototype_vectors</span></code></pre></div>
</details>
</div>
</section>
<section id="classify" class="level3">
<h3 class="anchored" data-anchor-id="classify">5. Classify</h3>
<p>To classify a query text, we can run cosine similarity against the prototype vectors and return the argmax as the most probable class!</p>
<div id="cell-12" class="cell" data-execution_count="62">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> classify(model, tokenizer, text, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, sample_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb8-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-3">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> sample_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prototype vectors are not passed, either pass a sample set prototype vectors"</span></span>
<span id="cb8-4">      prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(sample_set)</span>
<span id="cb8-5"></span>
<span id="cb8-6">  query_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, text)</span>
<span id="cb8-7">  </span>
<span id="cb8-8">  prototype_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(prototype_vectors.values()))</span>
<span id="cb8-9">  scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_transformers.util.cos_sim(query_embeddings, prototype_matrix)</span>
<span id="cb8-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> scores</span></code></pre></div>
</details>
</div>
<p>Using the above-defined functions and the sample set from before, we have:</p>
<div id="cell-14" class="cell" data-execution_count="65">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(model, tokenizer, sample_set)</span>
<span id="cb9-2">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span></span>
<span id="cb9-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model, tokenizer, query_text, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.6121, 0.7127, 0.6388]])
the predicted class is battery</code></pre>
</div>
</div>
<p>A bit strange! Although the expected class is predicted, scores for other classes are also high. Let’s try a harder query.</p>
<div id="cell-16" class="cell" data-execution_count="66">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'does it give good quality photos in the night?'</span>]</span>
<span id="cb11-2">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model, tokenizer, query, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.7984, 0.7043, 0.7647]])
the predicted class is camera</code></pre>
</div>
</div>
<p>Although the highest similarity is for ‘camera’, the similarity should be much higher.</p>
<p>The results do not get better even if we try cls-pooling. This only means that the embeddings produced by the model do not give us an accurate representation of the sentence.</p>
<p>We would then do good to remember that BERT pre-train was trained by MaskedLM, NextSentencePrediction, hence the original purpose of BERT is not to create a meaningful embedding of the sentence but for some specific downstream task. In fact, as the authors of the sentence-transformer paper [2] point out, out-of-the-box Bert embeddings perform even worse than GLoVE representations!</p>
<blockquote class="blockquote">
<p>Jacob Devlin’s comment: I’m not sure what these vectors are, since BERT does not generate meaningful sentence vectors. It seems that this is is doing average pooling over the word tokens to get a sentence vector, but we never suggested that this will generate meaningful sentence representations. And even if they are decent representations when fed into a DNN trained for a downstream task, it doesn’t mean that they will be meaningful in terms of cosine distance. (Since cosine distance is a linear space where all dimensions are weighted equally).</p>
</blockquote>
<p>There are a few ways to improve the bert-base for sentence-level tasks and both involve finetuning the model with some data.</p>
<ul>
<li>adding a linear layer on top and fine-tuning it.</li>
<li>making embeddings better by contrastive learning.</li>
</ul>
</section>
</section>
<section id="using-sentence-transformers" class="level2">
<h2 class="anchored" data-anchor-id="using-sentence-transformers">Using sentence transformers</h2>
<p>Ultimately, what we need is a better embedding module. Luckily we have such models. As it turns out, contrastive learning is an excellent approach for tuning our models such that different sentences produce semantically different embeddings.</p>
<p>We will explore contrastive learning and its inner workings some other day, but for now, let’s pick up open-source models that have been finetuned using contrastive learning. There is an entire library (aka sentence-transformers) and paper[2] dedicated to this.</p>
<p>We’ll use the <code>sentence-transformers/stsb-bert-base</code> model for our purposes.</p>
<section id="import-packages-and-download-model" class="level3">
<h3 class="anchored" data-anchor-id="import-packages-and-download-model">1. Import packages and download model</h3>
<div id="cell-18" class="cell" data-execution_count="55">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load a sentence transformer model</span></span>
<span id="cb13-4">sts_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence-transformers/stsb-bert-base'</span>)</span>
<span id="cb13-5">model2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sts_model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].auto_model.to(device)</span>
<span id="cb13-6">tokenizer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sts_model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tokenizer</span></code></pre></div>
</details>
</div>
</section>
<section id="use-the-above-defined-functions-to-prepare-prototype-vectors-and-classify-them-in-a-few-shot-setting" class="level3">
<h3 class="anchored" data-anchor-id="use-the-above-defined-functions-to-prepare-prototype-vectors-and-classify-them-in-a-few-shot-setting">2. Use the above-defined functions to prepare prototype vectors and classify them in a few-shot setting</h3>
<div id="cell-20" class="cell" data-execution_count="67">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(model2, tokenizer2, sample_set)</span>
<span id="cb14-2">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span></span>
<span id="cb14-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model2, tokenizer2, query_text, prototype_vectors)</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.0910, 0.4780, 0.1606]])
the predicted class is battery</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="68">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'does it give good quality photos in the night?'</span>]</span>
<span id="cb16-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model2, tokenizer2, query, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.4467, 0.1012, 0.2998]])
the predicted class is camera</code></pre>
</div>
</div>
<p>As we can see, the scores seem much more reasonable this time around. There is a much better correlation with the ground truth labels. Using better base models trained in multiple tasks further improves the performance of these models.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This brings us to the end of this blog. In summary, we explored the realm of few-shot learning, a machine-learning approach tailored for accurate predictions with limited labeled data. Initially, we employed BERT, but its design didn’t align with our objectives. Instead, we leveraged a model fine-tuned for sentence-level tasks, <code>sentence-transformers/stsb-bert-base</code>, which significantly improved our results.</p>
<p><strong>These are a few things to note:</strong></p>
<p>Although we directly used pre-trained models here, an interesting undertaking would be to perform the contrastive fine-tuning ourselves. Also, instead of using cosine similarity, we can train lightweight classifiers on top of our embedding module for better performance.</p>
<p>That’ll be all from my side. Until next time, Happy Reading!</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1] <a href="https://arxiv.org/pdf/1904.05046.pdf">Survey paper on few-shot learning</a></p>
<p>[2] <a href="https://arxiv.org/pdf/1908.10084.pdf">Sentence-Bert paper</a></p>
<p>[3] <a href="https://proceedings.neurips.cc/paper_files/paper/2017/file/cb8da6767461f2812ae4290eac7cbc42-Paper.pdf">Prototypical Networks</a></p>
<p>[4] <a href="https://lilianweng.github.io/posts/2018-11-30-meta-learning/#metric-based">Excellent much more techincal blog by Lilian Weng</a></p>


</section>

 ]]></description>
  <category>classification</category>
  <category>few-shot learning</category>
  <category>nlp</category>
  <guid>https://www.deepamminda.com/posts/few-shot-learning/prototype_networks.html</guid>
  <pubDate>Mon, 11 Sep 2023 18:30:00 GMT</pubDate>
  <media:content url="https://www.deepamminda.com/posts/few-shot-learning/cover.jpeg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
