<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deepamminda</title>
<link>https://mindadeepam.github.io/blog.html</link>
<atom:link href="https://mindadeepam.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.53</generator>
<lastBuildDate>Fri, 09 Aug 2024 18:30:00 GMT</lastBuildDate>
<item>
  <title>Training a Resnet in Pytorch</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://mindadeepam.github.io/posts/cnns/01_resnet.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In my last post <a href="../../posts/cnns/00_cnn_basics.html">Intro to CNNs</a>, we discussed the basics of CNNs and how to train a simple CNN from scratch. In this post, we will train a ResNet in Pytorch.</p>
<p>Resnets came around right after VGGs, where the author explored the idea of training very deep networks for better performance, since deeper models could in thoery learn more complex features. But after a certain point, more depth didnt help with wither validation accuracy nor training performance. This was confusing, since we would assume a larger model can atleast replicate the performance of a smaller network and then some!</p>
<p>Mathematically, if we have a shallower network <img src="https://latex.codecogs.com/png.latex?H(x)"> that performs well, a deeper network <img src="https://latex.codecogs.com/png.latex?F(x)"> should be able to learn an identity mapping in its additional layers, effectively becoming:</p>
<p><img src="https://latex.codecogs.com/png.latex?F(x)%20=%20H(x)%20+%20(F(x)%20-%20H(x))"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?(F(x)%20-%20H(x))"> is the residual mapping. Instead of hoping that <img src="https://latex.codecogs.com/png.latex?F(x)"> will learn the entire desired mapping, we can explicitly let it learn the residual mapping <img src="https://latex.codecogs.com/png.latex?(F(x)%20-%20H(x))">. This is the key idea behind ResNets: learning residual functions with reference to the layer inputs, rather than learning unreferenced functions.</p>
<p>This approach allows for the creation of very deep networks without the problem of vanishing gradients, as the gradient can flow directly through the skip connections (also known as shortcut connections) during backpropagation. We can imagine this as a graident highway that goes right through the network and then comes back to the input.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mindadeepam.github.io/posts/cnns/resnet-architecture.png" class="img-fluid figure-img"></p>
<figcaption>This is a resnet-architecture</figcaption>
</figure>
</div>
</section>
<section id="vggs" class="level1">
<h1>VGGs</h1>
<p>Since so much of the comparison is done with VGGs it is important to understand them too. Ignoring batch dimension for now, passing through CNNs can be visualized as volumes of data moving through through the network, volume being <img src="https://latex.codecogs.com/png.latex?(H,%20W,%20C)"> where <img src="https://latex.codecogs.com/png.latex?H,%20W"> are the height and width of the image and <img src="https://latex.codecogs.com/png.latex?C"> is the number of channels.</p>
<div id="fig-vgg" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-vgg-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mindadeepam.github.io/posts/cnns/vgg.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-vgg-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: vgg-19-architecture
</figcaption>
</figure>
</div>
<p>In VGGs</p>
<ul>
<li>there are 5 Conv blocks followed by some FC layers for classification. The Conv blocks can be thought of as a feature extractor.</li>
<li>each Conv block is a sequence of come <code>CONV-&gt;RELU</code> layers followed by a max_pool layer.</li>
<li>each conv layer has a kernel size of 3x3, stride=1 and padding=1.</li>
<li>The output of the last conv block is flattened and passed to the FC layers.</li>
<li>the FC layers have fixed sizes = [4096, 4096, 1000] with ReLU and Dropout after each layer.</li>
<li>Output is a 1000 sized vector., which represents Imagenet classes.</li>
</ul>
<section id="convrelu-layer" class="level2">
<h2 class="anchored" data-anchor-id="convrelu-layer">ConvReLU Layer</h2>
<p>Each block contains some conv_layers followed by a max_pool layer. If the input to a block is <img src="https://latex.codecogs.com/png.latex?(H,%20W,%20C)">, the output of the block is <img src="https://latex.codecogs.com/png.latex?(H/2,%20W/2,%20C*2)">. All in all each block still preserves the total volume.</p>
<p>Let us look inside a conv block, for eg the conv2 block in Figure&nbsp;1. We can see that the particular block has a max_pool (red) layer and 2 single-conv layers(blue). Each single-conv layer within that block is a:</p>
<p><code>conv_layer = [CNN-&gt;ReLU]</code></p>
<p>In torch,</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch </span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nn</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ConvReLU(nn.Module):</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A single conv layer followed by batchnorm and activation.</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_channels, out_channels, kernel_size, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.ReLU(), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-10"></span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels, out_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kernel_size, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stride, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>padding)</span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb1-13">        </span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-16">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv(x))</span>
<span id="cb1-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-18">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv(x)</span>
<span id="cb1-19"></span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span></code></pre></div>
</div>
<p>Lets create the conv1 layer and visualize the input and output volumes. The input is a rgb image of size <code>224x224x3</code></p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)   </span>
<span id="cb2-2"> </span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input images must have shape (C,H,W) this is usually managed by torch's to_tensor transform</span></span>
<span id="cb2-4">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.permute(input_img, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))      </span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conv layer params -&gt; C_in=3, C_out=64, K=3, S=1, P=1</span></span>
<span id="cb2-7">conv_layer_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb2-8">conv_layer_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max pool layer params -&gt; K=2, S=2</span></span>
<span id="cb2-11">max_pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input volume = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(input_img.shape))</span>
<span id="cb2-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output volume after conv_layer_1 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(conv_layer_1(input_img).shape))</span>
<span id="cb2-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output volume after conv_layer_2 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(conv_layer_2(conv_layer_1(input_img)).shape))</span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("output volume after max_pool = {}".format(max_pool(conv_layer_2(conv_layer_1(input_img))).shape))</span></span></code></pre></div>
</div>
</section>
<section id="block-of-convrelu-layers" class="level2">
<h2 class="anchored" data-anchor-id="block-of-convrelu-layers">Block of ConvReLU layers</h2>
<p>Now to make a block of VGG, we combine multiple such layers together. If you see the Figure&nbsp;1, each block’s has a red layer in the beginning. The red layer is a max_pool layer with stride=2 and kernel_size=2. This results in the <img src="https://latex.codecogs.com/png.latex?H,W"> being halved. Then the subsequent conv_layers preserve the <img src="https://latex.codecogs.com/png.latex?H,W"> and double the channels. Lets look at a block below:</p>
<p><code>Block = [conv_layer_1-&gt;[conv_layer_i]*(n-1)]</code>.</p>
<p>The feature extractor will look like this:</p>
<p>[<code>block_1 -&gt; Max_pool -&gt; block_2 -&gt; Max_pool -&gt; block_3 -&gt; ...</code>]</p>
<p>Lets create a block class:</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Block(nn.Module):</span>
<span id="cb3-2"></span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_channels, num_layers, out_channels, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.ReLU()):</span>
<span id="cb3-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-5">        </span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> out_channels <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> out_channels</span>
<span id="cb3-7">        </span>
<span id="cb3-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first layer must half the H_in,W_in and double the C_in with S=2, P=1</span></span>
<span id="cb3-9">        conv_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(input_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-10">        layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [conv_1]</span>
<span id="cb3-11">        </span>
<span id="cb3-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rest of the layers preserve the H_in, W_in and C_in with S=1 and P=1</span></span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-14">            conv_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-15">            layers.append(conv_)</span>
<span id="cb3-16"></span>
<span id="cb3-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers)</span>
<span id="cb3-18"></span>
<span id="cb3-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers(x)</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">max_pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3">conv1_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Block(input_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conv1_block(input_img)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output volume after conv1_block = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x.shape))</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conv_block_2 has half the h,w (due to max pool right before it) and double the input channels. </span></span>
<span id="cb4-10">conv2_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Block(input_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb4-11">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conv2_block(max_pool(x))</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output volume after conv2_block = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(x.shape))</span></code></pre></div>
</div>
</section>
<section id="vgg-model" class="level2">
<h2 class="anchored" data-anchor-id="vgg-model">VGG model</h2>
<p>We can go on this way for the rest of the blocks, but lets bring it together in a VGG class itself.</p>
<p>Lets write down the vgg configuration as a list of items. The model can be imagined as a feature extractor with a classifier head on top.</p>
<p>The classifier part has fixed configuration, but the feature extractor can be configured by passing a list of numbers and strings to the constructor. Each item is either a number or a string and represents a conv layer or a max_pool layer. The number is the number of conv layers in the block, and the string is ‘M’ which indicates a max pool layer.</p>
<p>The classifier part consists of 2 hidden-FC layers (4096 neurons each) with activations and dropout regularization added. The final layer is the classifier head with 1000 outputs. (Imagenet dataset has 1k classes)</p>
<p>Lastly, to enable the model to initialize with variable input sizes, we have used a dynamic input size of the 1st FC layer., and a dynamic hidden_fc_size for the last FC layer. This will allow us to experiment with smaller datasets locally</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">_vgg_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vgg19'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>],</span>
<span id="cb5-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vgg11'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>],</span>
<span id="cb5-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vgg13'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>],</span>
<span id="cb5-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vgg16'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>]</span>
<span id="cb5-6">}</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging </span>
<span id="cb5-8">logging.basicConfig(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logging.DEBUG)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> VGG(nn.Module):</span>
<span id="cb5-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, config, input_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, hidden_fc_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>):</span>
<span id="cb5-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb5-13"></span>
<span id="cb5-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_shape</span>
<span id="cb5-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_shape</span>
<span id="cb5-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_fc_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_fc_size</span>
<span id="cb5-17">        prev_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb5-18">        </span>
<span id="cb5-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> config:</span>
<span id="cb5-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>:</span>
<span id="cb5-22">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.blocks.append(nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) </span>
<span id="cb5-23">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-25">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.blocks.append(ConvReLU(prev_channels, i, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-26">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], i)</span>
<span id="cb5-27">                prev_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb5-28"></span>
<span id="cb5-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feature_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.blocks)</span>
<span id="cb5-30">        </span>
<span id="cb5-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ConvMLP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb5-32">            nn.Flatten(),</span>
<span id="cb5-33">            nn.Linear(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_fc_size),</span>
<span id="cb5-34">            nn.ReLU(),</span>
<span id="cb5-35">            nn.Dropout(dropout),</span>
<span id="cb5-36">            nn.Linear(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_fc_size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_fc_size),</span>
<span id="cb5-37">            nn.ReLU(),</span>
<span id="cb5-38">            nn.Dropout(dropout),</span>
<span id="cb5-39">        )</span>
<span id="cb5-40"></span>
<span id="cb5-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hidden_fc_size, num_classes)</span>
<span id="cb5-42"></span>
<span id="cb5-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb5-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if a single item turn into a batch</span></span>
<span id="cb5-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb5-46">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-47"></span>
<span id="cb5-48">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feature_extractor(x)</span>
<span id="cb5-49">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(x.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this flattens the tensor to (batch_size, -1)</span></span>
<span id="cb5-50">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ConvMLP(x)</span>
<span id="cb5-51">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.head(x)</span>
<span id="cb5-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span></code></pre></div>
</div>
<p>Now lets visualize the model, output shapes of various layers and its size, etc using torchinfo.summary(). To install the package run <code>pip install torchinfo</code> on your terminal.</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb6-2"></span>
<span id="cb6-3">vgg19 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VGG(_vgg_config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vgg19'</span>])</span>
<span id="cb6-4">summary(vgg19, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span></code></pre></div>
</div>
<p>A pretty huge model (140million parameters) isn’t it?! The original model was trained on the entire Imagenet dataset (150gb). But we’ll use the TinyImagenet dataset(&lt;1gb) for this example. So we’ll use a much smaller model.</p>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2">NUM_CLASSES<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tiny ImageNet has 200 classes</span></span>
<span id="cb7-3">IMG_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb7-4">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VGG(</span>
<span id="cb7-7">    _vgg_config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vgg11'</span>], </span>
<span id="cb7-8">    input_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(IMG_SIZE, IMG_SIZE, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), </span>
<span id="cb7-9">    num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NUM_CLASSES,</span>
<span id="cb7-10">    hidden_fc_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1026</span></span>
<span id="cb7-11">).to(device)</span>
<span id="cb7-12">        </span>
<span id="cb7-13">summary(model, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,IMG_SIZE,IMG_SIZE))</span></code></pre></div>
</div>
<p>This brings our model size down to a much more manageble 12million parameters from the original ~140 million parameters.</p>
<p>For training we’ll use the Adam optimizer and learing rate of 0.001. We’ll also use the CrossEntropyLoss as the loss function as this is a classification task.</p>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader, Dataset</span>
<span id="cb8-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms</span>
<span id="cb8-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.tensorboard <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SummaryWriter</span>
<span id="cb8-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb8-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb8-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib.request</span>
<span id="cb8-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zipfile</span>
<span id="cb8-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/"</span>):</span>
<span id="cb8-14">    os.mkdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/"</span>)</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters</span></span>
<span id="cb8-17">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb8-18">LEARNING_RATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span></span>
<span id="cb8-19">NUM_EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-20">DATASET_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/tiny-imagenet-200"</span></span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download and extract Tiny ImageNet</span></span>
<span id="cb8-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> download_and_extract_tiny_imagenet():</span>
<span id="cb8-24">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://cs231n.stanford.edu/tiny-imagenet-200.zip"</span></span>
<span id="cb8-25">    filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tiny-imagenet-200.zip"</span></span>
<span id="cb8-26">    extract_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DATASET_PATH</span>
<span id="cb8-27">    </span>
<span id="cb8-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.path.exists(extract_path):</span>
<span id="cb8-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading Tiny ImageNet..."</span>)</span>
<span id="cb8-30">        urllib.request.urlretrieve(url, filename)</span>
<span id="cb8-31">        </span>
<span id="cb8-32">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting Tiny ImageNet..."</span>)</span>
<span id="cb8-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> zipfile.ZipFile(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> zip_ref:</span>
<span id="cb8-34">            zip_ref.extractall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span>
<span id="cb8-35">        </span>
<span id="cb8-36">        os.remove(filename)</span>
<span id="cb8-37">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiny ImageNet downloaded and extracted."</span>)</span>
<span id="cb8-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-39">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tiny ImageNet already exists."</span>)</span>
<span id="cb8-40">    os.system(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mv tiny-imagenet-200 data/tiny-imagenet-200"</span>)</span>
<span id="cb8-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> extract_path</span>
<span id="cb8-42"></span>
<span id="cb8-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom Dataset for Tiny ImageNet</span></span>
<span id="cb8-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> TinyImageNetDataset(Dataset):</span>
<span id="cb8-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, root, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb8-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> root</span>
<span id="cb8-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split</span>
<span id="cb8-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transform</span>
<span id="cb8-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-51">        </span>
<span id="cb8-52"></span>
<span id="cb8-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:</span>
<span id="cb8-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> class_dir <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(os.path.join(root, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)):</span>
<span id="cb8-55">                class_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(root, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, class_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>)</span>
<span id="cb8-56">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> img_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(class_path):</span>
<span id="cb8-57">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.images.append(os.path.join(class_path, img_name))</span>
<span id="cb8-58">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(class_dir[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]))</span>
<span id="cb8-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>:</span>
<span id="cb8-60">            val_annotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(root, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_annotations.txt'</span>)</span>
<span id="cb8-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(val_annotations, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb8-62">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> f:</span>
<span id="cb8-63">                    img_name, class_id, _, _, _, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-64">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb8-65">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.images.append(os.path.join(root, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>, img_name))</span>
<span id="cb8-66">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(class_id[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]))</span>
<span id="cb8-67">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labelset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> labels <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> labels</span>
<span id="cb8-68">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels_to_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {label:idx <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx,label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labelset)}</span>
<span id="cb8-69"></span>
<span id="cb8-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.images)</span>
<span id="cb8-72"></span>
<span id="cb8-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb8-74">        img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.images[idx]</span>
<span id="cb8-75">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels_to_class[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels[idx]]</span>
<span id="cb8-76">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_path).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb8-77">        </span>
<span id="cb8-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform:</span>
<span id="cb8-79">            image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform(image)</span>
<span id="cb8-80">        </span>
<span id="cb8-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image, label</span>
<span id="cb8-82"></span>
<span id="cb8-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download and extract the dataset</span></span>
<span id="cb8-84"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data/tiny-imagenet-200"</span>):</span>
<span id="cb8-85">    dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DATASET_PATH</span>
<span id="cb8-86"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-87">    dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_and_extract_tiny_imagenet()</span>
<span id="cb8-88"></span>
<span id="cb8-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data transforms</span></span>
<span id="cb8-90">train_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb8-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transforms.RandomResizedCrop(64),</span></span>
<span id="cb8-92">    transforms.RandomHorizontalFlip(),</span>
<span id="cb8-93">    transforms.ColorJitter(brightness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, contrast<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, saturation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>),</span>
<span id="cb8-94">    transforms.ToTensor(),</span>
<span id="cb8-95">    transforms.Normalize(mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.485</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.456</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.406</span>], std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.229</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.224</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.225</span>])</span>
<span id="cb8-96">])</span>
<span id="cb8-97"></span>
<span id="cb8-98">val_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb8-99">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transforms.Resize(64),</span></span>
<span id="cb8-100">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transforms.CenterCrop(64),</span></span>
<span id="cb8-101">    transforms.ToTensor(),</span>
<span id="cb8-102">    transforms.Normalize(mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.485</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.456</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.406</span>], std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.229</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.224</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.225</span>])</span>
<span id="cb8-103">])</span>
<span id="cb8-104"></span>
<span id="cb8-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load datasets</span></span>
<span id="cb8-106">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TinyImageNetDataset(dataset_path, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_transform)</span>
<span id="cb8-107">val_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TinyImageNetDataset(dataset_path, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_transform, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataset.labelset)</span>
<span id="cb8-108"></span>
<span id="cb8-109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data loaders</span></span>
<span id="cb8-110">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-111">val_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(val_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-112"></span>
<span id="cb8-113"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize model, loss function, and optimizer</span></span>
<span id="cb8-114">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb8-115">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LEARNING_RATE)</span>
<span id="cb8-116"></span>
<span id="cb8-117"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TensorBoard writer</span></span>
<span id="cb8-118">writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SummaryWriter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'runs/vgg_tiny_imagenet'</span>)</span>
<span id="cb8-119"></span>
<span id="cb8-120"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_and_validate(epoch):</span>
<span id="cb8-121">    model.train()</span>
<span id="cb8-122">    train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-123">    train_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-124">    val_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-125">    val_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-126"></span>
<span id="cb8-127">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training</span></span>
<span id="cb8-128">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch_idx, (data, target) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(train_loader, desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>NUM_EPOCHS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - Training"</span>)):</span>
<span id="cb8-129">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(batch_idx)</span>
<span id="cb8-130">        data, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), target.to(device)</span>
<span id="cb8-131">        optimizer.zero_grad()</span>
<span id="cb8-132">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data)</span>
<span id="cb8-133">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(output, target)</span>
<span id="cb8-134">        loss.backward()</span>
<span id="cb8-135">        optimizer.step()</span>
<span id="cb8-136">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb8-137">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-138">        train_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> pred.eq(target.view_as(pred)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb8-139">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train loss </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>torch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(train_loss)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-140">        writer.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss/train_step'</span>, loss.item())</span>
<span id="cb8-141">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># writer.add_scalar('Loss/val', val_loss, epoch)</span></span>
<span id="cb8-142">    train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb8-143">    train_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> train_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader.dataset)</span>
<span id="cb8-144"></span>
<span id="cb8-145">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validation</span></span>
<span id="cb8-146">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb8-147">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb8-148">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data, target <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(val_loader, desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>NUM_EPOCHS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - Validation"</span>):</span>
<span id="cb8-149">            data, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), target.to(device)</span>
<span id="cb8-150">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data)</span>
<span id="cb8-151">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(output, target)</span>
<span id="cb8-152">            val_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb8-153">            pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-154">            writer.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss/val_step'</span>, loss.item())</span>
<span id="cb8-155">            val_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> pred.eq(target.view_as(pred)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb8-156">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val loss </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>torch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(val_loss)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-157">    val_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_loader)</span>
<span id="cb8-158">    val_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> val_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_loader.dataset)</span>
<span id="cb8-159"></span>
<span id="cb8-160">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log to TensorBoard</span></span>
<span id="cb8-161">    writer.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss/train'</span>, train_loss, epoch)</span>
<span id="cb8-162">    writer.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss/val'</span>, val_loss, epoch)</span>
<span id="cb8-163">    writer.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy/train'</span>, train_accuracy, epoch)</span>
<span id="cb8-164">    writer.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy/val'</span>, val_accuracy, epoch)</span>
<span id="cb8-165"></span>
<span id="cb8-166">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>NUM_EPOCHS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:'</span>)</span>
<span id="cb8-167">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Train Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Train Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span>
<span id="cb8-168">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Val Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Val Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span>
<span id="cb8-169"></span>
<span id="cb8-170"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb8-171"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_EPOCHS):</span>
<span id="cb8-172">    train_and_validate(epoch)</span>
<span id="cb8-173"></span>
<span id="cb8-174">writer.close()</span>
<span id="cb8-175"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training completed!"</span>)</span></code></pre></div>
</div>
<ul>
<li>Running vgg11 on colab gives us a score of ~28% accuracy on the validation set in 20 epochs, while training loss and val loss both were kind of still decreasing.</li>
</ul>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_params_and_grads(model, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb9-4">    grad_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(name, param.grad.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().cpu().detach().numpy())</span>
<span id="cb9-5">                   <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, param <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.named_parameters()</span>
<span id="cb9-6">                   <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> param.grad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb9-7">    </span>
<span id="cb9-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_grads(grad_values, title_prefix):</span>
<span id="cb9-9">        num_plots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grad_values))</span>
<span id="cb9-10">        fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_plots, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num_plots, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb9-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num_plots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb9-12">            axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [axes]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure axes is iterable if only one plot</span></span>
<span id="cb9-13"></span>
<span id="cb9-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_plots):</span>
<span id="cb9-15">            name, grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grad_values[idx]</span>
<span id="cb9-16">            axes[idx].hist(grad.flatten(), bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb9-17">            axes[idx].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title_prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Layer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-18">            axes[idx].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gradient Magnitude'</span>)</span>
<span id="cb9-19">            axes[idx].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb9-20">        </span>
<span id="cb9-21">        plt.tight_layout()</span>
<span id="cb9-22">        plt.show()</span>
<span id="cb9-23"></span>
<span id="cb9-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot first n parameters</span></span>
<span id="cb9-25">    plot_grads(grad_values[:n], title_prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'First'</span>)</span>
<span id="cb9-26"></span>
<span id="cb9-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot last n parameters</span></span>
<span id="cb9-28">    plot_grads(grad_values[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n:], title_prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Last'</span>)</span>
<span id="cb9-29"></span>
<span id="cb9-30"></span>
<span id="cb9-31">plot_params_and_grads(model, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<ul>
<li><p>Scaling to vgg_16:</p>
<pre><code>  suprisingly model isnt learning at all. loss not going down. upon inspection of gradients we find that while training vgg_199 there are practically no gradients.

  Also note that grads start even when loss isnt decreasing at the first few steps.</code></pre>
<p>Look at the the below figures:</p>
<p>### VGG-11 <img src="https://mindadeepam.github.io/posts/cnns/vgg_11_final_layer_grads.png" id="fig-vgg_11_final_layer_grads" style="width:100.0%" alt="‘VGG-11 Final Layer Gradients’"></p>
<div id="fig-vgg_11_first_layers_grad_plot" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-vgg_11_first_layers_grad_plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mindadeepam.github.io/posts/cnns/vgg_11_first_layers_grad_plot.png" style="width:100.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-vgg_11_first_layers_grad_plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: “VGG-11 First Layers Gradient Plot”
</figcaption>
</figure>
</div>
<p>### VGG-16 <img src="https://mindadeepam.github.io/posts/cnns/vgg_16_final_layers_grad.png" id="fig-vgg_16_final_layers_grad" style="width:100.0%" alt="“VGG-16 Final Layers Gradients”"></p>
<div id="fig-vgg_16_first_layers_grad_plot_vanishing-grads" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-vgg_16_first_layers_grad_plot_vanishing-grads-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mindadeepam.github.io/posts/cnns/vgg_16_first_layers_grad_plot_vanishing-grads.png" style="width:100.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-vgg_16_first_layers_grad_plot_vanishing-grads-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: “VGG-16 First Layers Gradient Plot”(Vanishing Gradients)
</figcaption>
</figure>
</div></li>
<li><p>Does removing bottlenecked maxpool before fc layers help?: No, it doesnt. :(</p></li>
<li><p>what about vgg13? being clser to the 11 variant this doesnt experience vanishing gradients.</p></li>
</ul>
<p>This is esssentialy the central limitations that still remain after going very deep. Depth is not enough, we need better ways to allow gradients to be propagated through these deep networks.</p>
<section id="computational-considerations" class="level3">
<h3 class="anchored" data-anchor-id="computational-considerations">computational considerations</h3>
<p>A usual Conv2d layer has a computation complexity of <img src="https://latex.codecogs.com/png.latex?O(H_%7Bin%7D*W_%7Bin%7D*k%5E2*C_%7Bin%7D*C_%7Bout%7D)">. Derivation:</p>
<ul>
<li>number of output cells = <img src="https://latex.codecogs.com/png.latex?H_%7Bout%7D*W_%7Bout%7D*C_%7Bout%7D"></li>
<li>computation required to compute each output cell = <img src="https://latex.codecogs.com/png.latex?k%5E2*C_%7Bin%7D"></li>
<li>number of ops<br>
-&gt; number of output cells * computation required to compute each output cell<br>
-&gt; <img src="https://latex.codecogs.com/png.latex?H_%7Bout%7D*W_%7Bout%7D*k%5E2*C_%7Bin%7D*C_%7Bout%7D"></li>
</ul>
</section>
</section>
</section>
<section id="inception" class="level1">
<h1>Inception</h1>
<p>VGGs large networks deal with issues of overfitting and increased computation. After it focus shifted to making the networks more compute efficient. Aiming to solve these issues by introducing extra sparsity in the network, the Inception model was proposed.</p>
<div id="cell-22" class="cell" data-execution_count="136">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NaiveInceptionBlock(nn.Module):</span>
<span id="cb11-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_channels, out_channels):</span>
<span id="cb11-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(NaiveInceptionBlock, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb11-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels, out_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3x3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels, out_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv5x5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels, out_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># padding to make sure h,w remains same</span></span>
<span id="cb11-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxpool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.conv2 = nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, padding=0)</span></span>
<span id="cb11-9"></span>
<span id="cb11-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb11-11">        out1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1x1(x)</span>
<span id="cb11-12">        out2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3x3(x)</span>
<span id="cb11-13">        out3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv5x5(x)</span>
<span id="cb11-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out4 = self.maxpool(x)</span></span>
<span id="cb11-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.cat([out1, out2, out3], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return [out1, out2, out3, out4]</span></span>
<span id="cb11-17"></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> InceptionBlock(nn.Module):</span>
<span id="cb11-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_channels, out_channels_1, out_channels_3, out_channels_5, out_channels_dim_red_3, out_channels_dim_red_5, pool_proj_dim):</span>
<span id="cb11-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(InceptionBlock, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb11-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(in_channels, out_channels_1, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-23">        </span>
<span id="cb11-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dim_reduction_3x3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(in_channels, out_channels_dim_red_3, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3x3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(out_channels_dim_red_3, out_channels_3, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-26">        </span>
<span id="cb11-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dim_reduction_5x5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(in_channels, out_channels_dim_red_5, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv5x5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(out_channels_dim_red_5, out_channels_5, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb11-29">        </span>
<span id="cb11-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxpool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool_proj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(in_channels, pool_proj_dim, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-32"></span>
<span id="cb11-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb11-34">        out1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1x1(x)</span>
<span id="cb11-35">        </span>
<span id="cb11-36">        out2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dim_reduction_3x3(x)</span>
<span id="cb11-37">        out2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3x3(out2)</span>
<span id="cb11-38">        </span>
<span id="cb11-39">        out3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dim_reduction_5x5(x)</span>
<span id="cb11-40">        out3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv5x5(out3)</span>
<span id="cb11-41">        </span>
<span id="cb11-42">        out4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.maxpool(x)</span>
<span id="cb11-43">        out4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool_proj(out4)</span>
<span id="cb11-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return [out1, out2, out3, out4]</span></span>
<span id="cb11-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.cat([out1, out2, out3, out4], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-execution_count="140">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># some intermediate layer output</span></span>
<span id="cb12-2"></span>
<span id="cb12-3">block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NaiveInceptionBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb12-4">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block(inp)</span>
<span id="cb12-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out.shape)</span>
<span id="cb12-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(summary(NaiveInceptionBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>), input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 192, 64, 64])
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
NaiveInceptionBlock                      [64, 192, 64]             --
├─Conv2d: 1-1                            [64, 64, 64]              16,448
├─Conv2d: 1-2                            [64, 64, 64]              147,520
├─Conv2d: 1-3                            [64, 64, 64]              409,664
==========================================================================================
Total params: 573,632
Trainable params: 573,632
Non-trainable params: 0
Total mult-adds (G): 2.35
==========================================================================================
Input size (MB): 4.19
Forward/backward pass size (MB): 6.29
Params size (MB): 2.29
Estimated Total Size (MB): 12.78
==========================================================================================</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="129">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">conv_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConvReLU(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb14-2">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conv_block(inp)</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out.shape)</span>
<span id="cb14-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(summary(conv_block, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 192, 64, 64])
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
ConvReLU                                 [192, 64, 64]             --
├─Conv2d: 1-1                            [192, 64, 64]             442,560
├─ReLU: 1-2                              [192, 64, 64]             --
==========================================================================================
Total params: 442,560
Trainable params: 442,560
Non-trainable params: 0
Total mult-adds (G): 5.44
==========================================================================================
Input size (MB): 4.19
Forward/backward pass size (MB): 6.29
Params size (MB): 1.77
Estimated Total Size (MB): 12.26
==========================================================================================</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="147">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">out_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb16-2">block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InceptionBlock(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, out_channels, out_channels, out_channels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, out_channels)</span>
<span id="cb16-3">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block(inp)</span>
<span id="cb16-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out.shape)</span>
<span id="cb16-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(summary(block, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 192, 64, 64])
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
InceptionBlock                           [48, 896, 224]            --
├─ConvReLU: 1-1                          [48, 224, 224]            --
│    └─Conv2d: 2-1                       [48, 224, 224]            12,336
├─ConvReLU: 1-10                         --                        (recursive)
│    └─ReLU: 2-2                         [48, 224, 224]            --
├─ConvReLU: 1-3                          [64, 224, 224]            --
│    └─Conv2d: 2-3                       [64, 224, 224]            16,448
├─ConvReLU: 1-10                         --                        (recursive)
│    └─ReLU: 2-4                         [64, 224, 224]            --
├─ConvReLU: 1-5                          [48, 224, 224]            --
│    └─Conv2d: 2-5                       [48, 224, 224]            27,696
├─ConvReLU: 1-10                         --                        (recursive)
│    └─ReLU: 2-6                         [48, 224, 224]            --
├─ConvReLU: 1-7                          [32, 224, 224]            --
│    └─Conv2d: 2-7                       [32, 224, 224]            8,224
├─ConvReLU: 1-10                         --                        (recursive)
│    └─ReLU: 2-8                         [32, 224, 224]            --
├─ConvReLU: 1-9                          [48, 224, 224]            --
│    └─Conv2d: 2-9                       [48, 224, 224]            38,448
├─ConvReLU: 1-10                         --                        (recursive)
│    └─ReLU: 2-10                        [48, 224, 224]            --
├─MaxPool2d: 1-11                        [256, 224, 224]           --
├─ConvReLU: 1-12                         [48, 224, 224]            --
│    └─Conv2d: 2-11                      [48, 224, 224]            12,336
│    └─ReLU: 2-12                        [48, 224, 224]            --
==========================================================================================
Total params: 115,488
Trainable params: 115,488
Non-trainable params: 0
Total mult-adds (G): 1.27
==========================================================================================
Input size (MB): 51.38
Forward/backward pass size (MB): 115.61
Params size (MB): 0.46
Estimated Total Size (MB): 167.45
==========================================================================================</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>cnns</category>
  <category>deep-learning</category>
  <guid>https://mindadeepam.github.io/posts/cnns/01_resnet.html</guid>
  <pubDate>Fri, 09 Aug 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Intro to Convolution Neural Networks</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://mindadeepam.github.io/posts/cnns/00_cnn_basics.html</link>
  <description><![CDATA[ 





<p>Welcome to the land of vision in deep learning. Gone are the days you need to look at 10 types of thresholding and 20 types of data pre-processing and apply a logistic classifier on the outputs of a cnn feature extractor. These days you can just load a pretrained model and watch a decaying training and validation loss and feel good about yourself.</p>
<p>Turns out, this comfort doesnt last long. You eventually get around to understand what these models actually are because you need to! And when it comes to vision, you surely cannot leave out CNNs. Sure its all transformers nowadays but CNNs or convolutional neural networks were essentially the first deep learning models to make a significant impact in the field of computer vision and most would agree started the whole deep learning wave in the modern era. AlexNet, VGG, resnets would be considered the pioneer models in this field.</p>
<p>Now you might ask: All this sounds interesting Deepam, but what the hell is a convolution? Let us understand convolutions and build a simple CNN model from scratch.</p>
<p>The pre-requisites for this post are:</p>
<ul>
<li>Basic understanding of python, numpy and torch.</li>
<li>Basic understanding of neural networks and feed forward networks.</li>
</ul>
<section id="convolutions" class="level2">
<h2 class="anchored" data-anchor-id="convolutions">Convolutions</h2>
<p>Convolutions is just an operation between 2 signals (vectors/matrices/continuous-signals) that returns a 3rd signal. It represents how one signal modifies the other signal. In general terms, convolution is used to apply a filter to a signal or data. (We’ll understand convolution for discrete signals)</p>
<section id="steps-in-convolution" class="level3">
<h3 class="anchored" data-anchor-id="steps-in-convolution">Steps in Convolution</h3>
<p>Let’s consider two signals: the input signal <img src="https://latex.codecogs.com/png.latex?(f)"> and the kernel/filter <img src="https://latex.codecogs.com/png.latex?(g)">.</p>
<p>Convolution involves the following steps:</p>
<ol type="1">
<li><p><strong>Prepare the Kernel</strong>: Flip the kernel <img src="https://latex.codecogs.com/png.latex?(g)"> both horizontally and vertically. This step ensures the operation is commutative and maintains time-reversal properties. <a href="https://dsp.stackexchange.com/questions/5992/flipping-the-impulse-response-in-convolution/6355#6355">More details</a></p></li>
<li><p><strong>Align and Slide</strong>: Position the flipped kernel at the start of the input signal <img src="https://latex.codecogs.com/png.latex?(f)">. Then, systematically slide it across the entire length of <img src="https://latex.codecogs.com/png.latex?(f)">.</p></li>
<li><p><strong>Multiply</strong>: At each position, perform element-wise multiplication between the overlapping portions of the flipped kernel and the input signal.</p></li>
<li><p><strong>Sum</strong>: Add up all the products from step 3 to get a single value. This value represents the convolution result at the current position.</p></li>
<li><p><strong>Record and Repeat</strong>: Store the sum as an element in the output signal, then move the kernel to the next position and repeat steps 3-5 until the entire input signal has been covered.</p></li>
</ol>
<p>The resulting output signal represents how the kernel has “filtered” or modified the input signal, highlighting certain features or patterns based on the kernel’s characteristics.</p>
<p>This process can be extended to 2D (for images) or higher dimensions, where the kernel slides over the input in all dimensions.</p>
<p>For a 1d array this might look like this:</p>
<div id="cell-4" class="cell" data-execution_count="61">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span>
<span id="cb1-3"></span>
<span id="cb1-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb1-5">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1-6">inverted_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {-1 0 1}</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"f: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"g: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"inverted_g: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>inverted_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12">window_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-13">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Steps in convolution, slide inverted g (say g`) over f in a loop: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(f)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)):</span>
<span id="cb1-17">    slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>window_size]</span>
<span id="cb1-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.1 element wise multiplication of f[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>window_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] and g`: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slice_of_f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> * </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>inverted_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inverted_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.2 sum(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inverted_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inverted_g)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-20">    result.append(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(slice_of_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inverted_g))</span>
<span id="cb1-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"result: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>[result[j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(result))]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"final result of (f*g): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>f: [ 1  2  3 -1 10 -4]
g: [ 1  0 -1]
inverted_g: [-1  0  1]

Steps in convolution, slide inverted g (say g`) over f in a loop: 

step 1.1 element wise multiplication of f[0:3] and g`: [1 2 3] * [-1  0  1] = [-1  0  3]
step 1.2 sum([-1  0  3]) = 2
result: [2]

step 2.1 element wise multiplication of f[1:4] and g`: [ 2  3 -1] * [-1  0  1] = [-2  0 -1]
step 2.2 sum([-2  0 -1]) = -3
result: [2, -3]

step 3.1 element wise multiplication of f[2:5] and g`: [ 3 -1 10] * [-1  0  1] = [-3  0 10]
step 3.2 sum([-3  0 10]) = 7
result: [2, -3, 7]

step 4.1 element wise multiplication of f[3:6] and g`: [-1 10 -4] * [-1  0  1] = [ 1  0 -4]
step 4.2 sum([ 1  0 -4]) = -3
result: [2, -3, 7, -3]


final result of (f*g): [2, -3, 7, -3]</code></pre>
</div>
</div>
<p>We also have a few types of convolutions, based on how much padding is added to the input signal:</p>
<ol type="1">
<li><strong>Valid Convolution</strong>:
<ul>
<li>The output is smaller than the input. No padding is applied.</li>
<li>Output length = length(f) - length(g) + 1 = 5 - 3 + 1 = 3</li>
</ul></li>
<li><strong>Same Convolution</strong>:
<ul>
<li>Padding is applied to keep the output size the same as the input.</li>
<li>We add 1 zero on each side of the input: [0, 1, 2, 3, 4, 5, 0].</li>
<li>Output length = length(f) = 5</li>
</ul></li>
<li><strong>Full Convolution</strong>:
<ul>
<li>Maximum padding is applied.</li>
<li>Output length = length(f) + length(g) - 1 = 5 + 3 - 1 = 7.</li>
<li>Here, we add 2 zeros on each side of the input: [0, 0, 1, 2, 3, 4, 5, 0, 0]<br>
(num of zeros=length(g)-1)</li>
</ul></li>
</ol>
<div id="cell-6" class="cell" data-execution_count="74">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] )</span>
<span id="cb3-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"f: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"g (kernel): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Valid Convolution: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>convolve(f, g, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Same Convolution: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>convolve(f, g, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Full Convolution: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>convolve(f, g, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'full'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Valid Convolution: [5 8]
Same Convolution: [2 2 5 8 5]
Full Convolution: [ 1  2  2  5  8  5  7 15]</code></pre>
</div>
</div>
<p>That wasnt so hard was it? The concept of convolution seems simple enough. Slide one signal over another and each time, do element wise multiplication and summation to get a value.</p>
<p>Lets look at an example for 2d arrays.</p>
<p>Lets take 2 matrices <img src="https://latex.codecogs.com/png.latex?f"> &amp; <img src="https://latex.codecogs.com/png.latex?g"> of shapes (5,5) and (3,3). First we need to flip the <img src="https://latex.codecogs.com/png.latex?g"> both horizontally and vertically. Then, for each <img src="https://latex.codecogs.com/png.latex?g"> sized block in <img src="https://latex.codecogs.com/png.latex?f">, we do element-wise multiplication then summation. This gives us a resulting (3,3) matrix (valid-convolution).</p>
<p>Lets see how this works.</p>
<div id="cell-8" class="cell" data-execution_count="89">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb5-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb5-3">inverted_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(f): </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(g): </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"inverted g, ie (g`): </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>inverted_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>(f): 
[[0.23919993 0.26375948 0.29688748 0.11150198 0.18742085]
 [0.03906332 0.84585776 0.93079439 0.71811113 0.0409505 ]
 [0.70677725 0.5303402  0.6267753  0.3776878  0.85878914]
 [0.55914983 0.44782982 0.05075409 0.67132382 0.70423151]
 [0.19054968 0.44657225 0.66843129 0.01343633 0.55834927]]

(g): 
[[ 1  0 -1]
 [ 2  0 -2]
 [ 3  0 -3]]

inverted g, ie (g`): 
[[-3  0  3]
 [-2  0  2]
 [-1  0  1]]
</code></pre>
</div>
</div>
<div id="cell-9" class="cell" data-execution_count="90">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">f_rows, f_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.shape </span>
<span id="cb7-2">g_rows, g_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g.shape</span>
<span id="cb7-3"></span>
<span id="cb7-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((f_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, f_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Convolution steps:"</span>)</span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(f_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(f_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-8">        item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>g_rows, j:j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>g_columns] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> inverted_g</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-10">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-&gt;sum(f[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>g_rows<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>g_columns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] * g`): </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>item<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-11">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"result[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(item)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-12">        result[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(item)</span>
<span id="cb7-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"... and so on.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"final result: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Convolution steps:
step 1
-&gt;sum(f[0:3, 0:3] * g`): 
[[-0.7175998   0.          0.89066245]
 [-0.07812665  0.          1.86158878]
 [-0.70677725  0.          0.6267753 ]]
result[0,0] -&gt; 1.8765

step 2
-&gt;sum(f[1:4, 0:3] * g`): 
[[-0.11718997  0.          2.79238318]
 [-1.4135545   0.          1.25355059]
 [-0.55914983  0.          0.05075409]]
result[1,0] -&gt; 2.0068

step 3
-&gt;sum(f[2:5, 0:3] * g`): 
[[-2.12033176  0.          1.88032589]
 [-1.11829965  0.          0.10150818]
 [-0.19054968  0.          0.66843129]]
result[2,0] -&gt; -0.7789

... and so on.

final result: 
[[ 1.87652283 -0.86491817 -1.87607385]
 [ 2.00679355 -0.46505069 -1.55202658]
 [-0.77891572 -0.44410511  1.89291435]]
</code></pre>
</div>
</div>
<p><img src="https://lilianweng.github.io/posts/2017-12-15-object-recognition-part-2/numerical_no_padding_no_strides.gif" class="img-fluid" style="display: block; margin: auto;" width="500"></p>
<div class="quarto-figure quarto-figure-center" style="display: block; margin: auto;">
<figure class="figure">
<p><img src="https://lilianweng.github.io/posts/2017-12-15-object-recognition-part-2/numerical_padding_strides.gif" class="img-fluid figure-img" width="500"></p>
<figcaption>Two examples of 2D convolution operation: (top) no padding and 1x1 strides; (bottom) 1x1 border zeros padding and 2x2 strides. (Image source: deeplearning.net)</figcaption>
</figure>
</div>
</section>
</section>
<section id="neural-networks" class="level2">
<h2 class="anchored" data-anchor-id="neural-networks">Neural networks</h2>
<p>Now that we clearly understand what a convolution is, lets get back to neural networks. Suppose you wanted to classify images before CNNs were developed. How would you do it? In most cases, you would use some pre-determined filters to extract features from the images and then use a fully connected network to classify the images. Those features could be:</p>
<ol type="1">
<li><p>Edge filters: Used to detect edges in images. Common edge detection filters include:</p>
<ul>
<li>Sobel filter: Emphasizes horizontal or vertical edges</li>
<li>Prewitt filter: Similar to Sobel, but with different coefficients</li>
<li>Laplacian filter: Detects edges in all directions</li>
</ul></li>
<li><p>Texture filters: Used to capture texture information:</p>
<ul>
<li>Gabor filters: Detect specific frequencies and orientations</li>
<li>Laws’ texture energy measures: A set of filters for texture analysis</li>
</ul></li>
<li><p>Color histograms: Represent the distribution of colors in an image</p></li>
<li><p>SIFT (Scale-Invariant Feature Transform): Detects and describes local features in images</p></li>
<li><p>HOG (Histogram of Oriented Gradients): Counts occurrences of gradient orientations in localized portions of an image</p></li>
<li><p>Haar-like features: Used in face detection, these features look at rectangular regions and sum up pixel intensities</p></li>
</ol>
<p>After applying these filters, you would typically:</p>
<ol type="1">
<li>Extract the resulting features</li>
<li>Possibly apply dimensionality reduction techniques like PCA</li>
<li>Feed the processed features into a classifier such as SVM, Random Forest, or a simple neural network</li>
</ol>
<p>This approach, while effective for certain tasks, had limitations: - Handcrafted features might not capture all relevant information - The process was often computationally expensive - Feature engineering required domain expertise</p>
<p>CNNs addressed these issues by learning the filters automatically during training, leading to more effective and adaptable vision models. Let us look at all the important components of a CNN in the next section.</p>
</section>
<section id="convolutional-layer" class="level2">
<h2 class="anchored" data-anchor-id="convolutional-layer">Convolutional layer</h2>
<p>We now understand why handcrafted fatures are hard to come up with. Lets back up for a second and remember our old friends feed forward (FF) networks. What is the problem with using feed forward networks to process images? Specifically why dont we just give the FF network the raw pixels and let it learn?</p>
<p>As it turns out, there are quite a few things:</p>
<p>Suppose we have a (224,224,3) sized input-image. Thats a total of 150528 data-points. suppose i want to have a output vector of length 1000 (classifier with 1k classes), this gives me a total of roughly 150k * 1k = 150 million parameters, where we have 1k parameters for each input pixel! That is a LOTT of parameters.</p>
<p>So how can we use the inherent nature of images and image-data to construct better models? We also learned convolutions in the previous section. Maybe that gives you some hint?</p>
<p>Pixel data is inherently very locally dependent. This is very different from tabular data, for example, a housing price dataset where each feature is largely independent of each other. By design feedforward networks do not allow for this kind of information to be shared between different data points in the network. This is beacause for each linear layer, a output shaped weight matrix is learned for each point in the input. This seems very inefficient.</p>
<p>What if instead of treating each individual pixel as a different input, we treat a patch of pixels as a single input? This means we get one output for a patch of pixels. This is done via convolution. We can learn a lot of small filters that will interact with our image and get us some useful features which can then be fed to a FF network.</p>
<p>This is exactly what a convolutional layer does. It consists of a set of learnable filters that slide over the input image and compute the output. If the input image is of size <img src="https://latex.codecogs.com/png.latex?(H_%7Bin%7D,%20W_%7Bin%7D,%20C_%7Bin%7D)">, and we have <img src="https://latex.codecogs.com/png.latex?C_%7Bout%7D"> filters of size <img src="https://latex.codecogs.com/png.latex?(k,k,C_%7Bin%7D)">, the output of the convolutional layer is of size <img src="https://latex.codecogs.com/png.latex?(H_%7Bout%7D,%20W_%7Bout%7D,%20C_%7Bout%7D)">. Each filter slides over the entire input volume and produces a 2d matrix of size <img src="https://latex.codecogs.com/png.latex?(H_%7Bout%7D,%20W_%7Bout%7D)">. And this is done for all the filters in the layer. So the output of the convolutional layer is a 3d tensor of size <img src="https://latex.codecogs.com/png.latex?(H_%7Bout%7D,%20W_%7Bout%7D,%20C_%7Bout%7D)">.</p>
<p>Note that the filters will always have depth equal to the input volume’s depth.</p>
<p>The number of parameters learned here would be <img src="https://latex.codecogs.com/png.latex?(k*k*C_%7Bin%7D*C_%7Bout%7D)">. So for a conv layer with 64 filters of size (3x3) for an input image of size (224x224x3), we would have 1792 parameters, ehich is orders of magnitutde smaller already. Much more efficient isn’t it?</p>
<!-- 
1. Feed forward networks do not share information between different data points in the network. For example if X = [0,1,2,3] is a vector of input to the network, all the interactions between weights happen independently for each data point in one sample of data.
This works fine for tabular features of some data, because they actually are not dependent on their spatial postion wrt each other. The model will learn the same if you shuffle all columns of a dataset. <br><br>But images pixels are a different type of data. They are inherently very locally dependent. If you look at a single pixel, it is very likely to be highly correlated with its neighboring pixels. Hence our network should process atleast patches of images at a time. 

2. Earlier when classical image processing methods were being used, many a times hand-made "filters" were used to extract features from images. In CNNs, we learn these filters! and we learn a lot of them. So think of each layer in this CNN as having a lot of these filters which are learned during network. We'll soon visualize what concepts they learn.

3. Another concept that helps is parameter sharing. We could in thoery have different set of filters for different patches in the image, but this would shoot up the parameter count of our model. So in a single layer, we use a single set of filters for all patches in the image. -->
<div id="cell-13" class="cell" data-execution_count="92">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_total_params(model):</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters())</span>
<span id="cb9-5"></span>
<span id="cb9-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150528</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb9-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Total params in a linear layer of shape (150528, 1000): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_total_params(model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-8"></span>
<span id="cb9-9">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Total params in a conv layer with kernel size (3,3) and 64 filters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_total_params(model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Total params in a linear layer of shape (150528, 1000): 150529000
Total params in a conv layer with kernel size (3,3) and 64 filters: 1792</code></pre>
</div>
</div>
<p>Let us visualize the shapes of the input and output of a convolutional layer. (ignoring batch dimension for simplicity)</p>
<p>Images are typically represented as 3D tensors: <img src="https://latex.codecogs.com/png.latex?(H_%7Bin%7D,%20W_%7Bin%7D,%20C_%7Bin%7D)"></p>
<p>Think of this as a stack of 2D images, where: - <img src="https://latex.codecogs.com/png.latex?H_%7Bin%7D"> is the height - <img src="https://latex.codecogs.com/png.latex?W_%7Bin%7D"> is the width - <img src="https://latex.codecogs.com/png.latex?C_%7Bin%7D"> is the number of channels (e.g., 3 for RGB)</p>
<p>Now, let’s break down the convolution operation:</p>
<ol type="1">
<li>The Filter (or Kernel)
<ul>
<li>We have <img src="https://latex.codecogs.com/png.latex?C_%7Bout%7D"> filters, each of size <img src="https://latex.codecogs.com/png.latex?(k,%20k,%20C_%7Bin%7D)"></li>
<li>Each filter slides across the entire input image</li>
</ul></li>
<li>The Sliding Window
<ul>
<li>Imagine a window of size <img src="https://latex.codecogs.com/png.latex?(k,%20k)"> moving across the image</li>
<li>At each position, we perform a dot product between the filter and the image patch</li>
</ul></li>
<li>The Output
<ul>
<li>For each filter, we get a 2D output <img src="https://latex.codecogs.com/png.latex?(H_%7Bout%7D,%20W_%7Bout%7D)"></li>
<li>Stacking these for all <img src="https://latex.codecogs.com/png.latex?C_%7Bout%7D"> filters gives us <img src="https://latex.codecogs.com/png.latex?(H_%7Bout%7D,%20W_%7Bout%7D,%20C_%7Bout%7D)"></li>
</ul></li>
</ol>
<p>Key Parameters: - Stride (<img src="https://latex.codecogs.com/png.latex?S">): How many pixels we move the filter each step, if stride is 1, the filter moves 1 pixel inat a time. Doubling the stride will reduce output size by half. - Padding (<img src="https://latex.codecogs.com/png.latex?P">): Extra zeros added around the input image edges. Image can be padded with other values too. padding is done on both sides of the height and width dimensions. - Dilation (<img src="https://latex.codecogs.com/png.latex?D">): a parameter that controls the stride of elements in the window. default=1.</p>
<p>Output Size Formula:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?H_%7Bout%7D%20=%20(H_%7Bin%7D%20-%20k%20+%202P)%20/%20S%20+%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?W_%7Bout%7D%20=%20(W_%7Bin%7D%20-%20k%20+%202P)%20/%20S%20+%201"></li>
</ul>
<p>Intuition: - Larger stride → Smaller output (we’re skipping pixels) - More padding → Larger output (we’re adding extra space to convolve over) (as we saw in different types of convolution)</p>
<p>Summarising,</p>
<ul>
<li>input: <img src="https://latex.codecogs.com/png.latex?(H_%7Bin%7D,%20W_%7Bin%7D,%20C_%7Bin%7D)"></li>
<li>conv_layer params:
<ul>
<li>filter: <img src="https://latex.codecogs.com/png.latex?(k,%20k,%20C_%7Bin%7D)"></li>
<li>num_filters: <img src="https://latex.codecogs.com/png.latex?C_%7Bout%7D"></li>
<li>stride: <img src="https://latex.codecogs.com/png.latex?S"></li>
<li>padding: <img src="https://latex.codecogs.com/png.latex?P"></li>
</ul></li>
<li>output: <img src="https://latex.codecogs.com/png.latex?(H_%7Bout%7D,%20W_%7Bout%7D,%20C_%7Bout%7D)">, where
<ul>
<li><img src="https://latex.codecogs.com/png.latex?H_%7Bout%7D%20=%20(H_%7Bin%7D%20-%20k%20+%202P)%20/%20S%20+%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?W_%7Bout%7D%20=%20(W_%7Bin%7D%20-%20k%20+%202P)%20/%20S%20+%201"></li>
</ul></li>
</ul>
<p>For a visual understanding of how all these parameters interact, check out this <a href="https://ezyang.github.io/convolution-visualizer/">convolution visualizer</a>.</p>
</section>
<section id="other-layers" class="level2">
<h2 class="anchored" data-anchor-id="other-layers">Other layers</h2>
<p>Conolutional layers are usually followed by activation functions like ReLU and then a pooling layer.</p>
<section id="pooling-layer" class="level3">
<h3 class="anchored" data-anchor-id="pooling-layer">Pooling layer</h3>
<p>Pooling layer? Yes, pooling layer. Given a volume of input, instead of using filters, we can use non-parameterized operations like min and max to downsample the data and get a smaller volume. That’s what pooling does. It reduces the H and W dimensions of the input volume, keeping the depth the same. But why would we do something like that? Two main reasons:</p>
<ol type="1">
<li>Reduce the number of parameters: By reducing the number of parameters, the model can learn more general features.</li>
<li>Reduce the amount of overfitting: By reducing the amount of overfitting, the model can learn more robust features.</li>
</ol>
<p>The entire operation is the same as the convolutional layer except instead of convolving <img src="https://latex.codecogs.com/png.latex?f"> with a filter <img src="https://latex.codecogs.com/png.latex?g"> of size <img src="https://latex.codecogs.com/png.latex?(k,k,%20C_%7Bin%7D)">, we take the max/mean of <img src="https://latex.codecogs.com/png.latex?f"> for each patch of size <img src="https://latex.codecogs.com/png.latex?(k,k,%20C_%7Bin%7D)">.</p>
<p>Let’s look at an example of max pooling, which is the most common type of pooling:</p>
<div id="cell-16" class="cell" data-execution_count="81">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input feature map</span></span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb11-3">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb11-4">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb11-5">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb11-6">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb11-7">])</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Max pooling with 2x2 filter and stride 2</span></span>
<span id="cb11-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> max_pool(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, filter_size, stride):</span>
<span id="cb11-11">    height, width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.shape</span>
<span id="cb11-12">    output_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> filter_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-13">    output_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> filter_size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-14">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((output_height, output_width))</span>
<span id="cb11-15">    </span>
<span id="cb11-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(output_height):</span>
<span id="cb11-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(output_width):</span>
<span id="cb11-18">            start_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stride</span>
<span id="cb11-19">            start_j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stride</span>
<span id="cb11-20">            window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[start_i:start_i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>filter_size, start_j:start_j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>filter_size]</span>
<span id="cb11-21">            output[i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(window)</span>
<span id="cb11-22">    </span>
<span id="cb11-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span>
<span id="cb11-24"></span>
<span id="cb11-25">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_pool(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb11-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input:"</span>)</span>
<span id="cb11-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb11-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">After 2x2 Max Pooling:"</span>)</span>
<span id="cb11-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""Result: </span></span>
<span id="cb11-30"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[[ max(f[0:2, 0:2]) max(f[0:2, 2:4])]</span></span>
<span id="cb11-31"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> [ max(f[2:4, 0:2]) max(f[2:4, 2:4])]]</span></span>
<span id="cb11-32"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span>
<span id="cb11-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Input:
[[1 3 2 1]
 [5 6 4 2]
 [7 8 9 4]
 [1 2 3 5]]

After 2x2 Max Pooling:
Result: 
[[ max(f[0:2, 0:2]) max(f[0:2, 2:4])]
 [ max(f[2:4, 0:2]) max(f[2:4, 2:4])]]

[[6. 4.]
 [8. 9.]]</code></pre>
</div>
</div>
<p>As you can see, max pooling takes the maximum value in each 2x2 region, effectively reducing the spatial dimensions of the feature map while retaining the most prominent features. Generally a stride of 2 is used, which means that pooling results in half the resolution as the input (h,w).</p>
</section>
<section id="activation-layer" class="level3">
<h3 class="anchored" data-anchor-id="activation-layer">Activation layer</h3>
<p>Activations used are sigmoid, ReLu, and tanh. Since VGGs and deeper networks use ReLu, it is common to see ReLu used in CNNs. This is because ReLu partially solves the vanishing gradient problem, which is a common problem in deep networks. Read more about this <a href="https://stats.stackexchange.com/a/240491">here</a>.</p>
<p>But what the ReLU layer does is very simple, it applies max(0, x) to each element in the input. Effectively, it zeros out negative values, and leaves positive values unchanged.</p>
</section>
<section id="other-jargon" class="level3">
<h3 class="anchored" data-anchor-id="other-jargon">Other jargon</h3>
<p>Before we dive into training a model, let’s review some important jargon related to CNNs:</p>
<ul>
<li>filters: also called kernels. they are learnable parameters in a convolutional layer. Each filter is a small matrix (usually 3x3 or 5x5) that slides over the input image to detect specific features. The values in these filters are updated during training to learn important features for the task at hand.</li>
<li>activation maps: the output when a [Conv-&gt;Relu] filter interacts with entire image.</li>
<li>feature maps: the output of a convolutional layer. (before the activation)</li>
<li>depth: refers to the number of channels.</li>
<li>receptive field: the area of the input that a given filter is able to see at a time is called the receptive field.</li>
</ul>
<!-- ## CNNs from scratch!
 
Let us implement a CNN from scratch. 

Starting with the Convolutional layer.

```python
import torch 

class ConvLayer:
    def __init__(self, in_channels, out_channels, kernel_size, stride, padding):
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.kernel_size = kernel_size
        self.stride = stride
        self.padding = padding
        self.weights = torch.randn(out_channels, in_channels, kernel_size, kernel_size)
        self.biases = torch.zeros(out_channels)

    def forward(self, x):
        if x.ndim != 4:
            raise ValueError("Input tensor must have 4 dimensions: (batch_size, in_channels, height, width)")
        if x.shape[1] != self.in_channels:
            raise ValueError(f"Expected input shape to have {self.in_channels} channels, but got {x.shape[1]}")
'''
# broadcast weights across batch, and then perform conv operation
# conv operation
    # apply padding
    start with a patch  of k sized kernel and do element wise operation in 2 nested loops (across H and W)
    
    B*C*H*W * 
'''
``` -->
</section>
</section>
<section id="a-simple-cnn-architecture" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-cnn-architecture">A Simple CNN architecture</h2>
<p>Lets assume a simple task of image classification. The most common form of a CNN architecture stacks a few CONV-RELU layers, follows them with POOL layers, and repeats this pattern until the image volume has reduced to a small size. At some point, it is common to transition to fully-connected layers. The last fully-connected layer holds the output, such as the class scores. In other words, the most common ConvNet architectures follow the pattern:</p>
<p><code>INPUT -&gt; [[CONV -&gt; RELU]*N -&gt; POOL?]*M -&gt; [FC -&gt; RELU]*K -&gt; FC</code></p>
<p>here FC: feed-forward layer.</p>
<p>Note that since architectures like <a href="https://arxiv.org/pdf/1512.03385">Resnet</a> and <a href="https://arxiv.org/pdf/1409.4842">Inception</a> emerged, this is not the case, and the CNNs feature more intricate and different connectivity structures.</p>
</section>
<section id="cnn-characteristics" class="level2">
<h2 class="anchored" data-anchor-id="cnn-characteristics">CNN characteristics</h2>
<p>While we are here, let us also take note of some characteristics of CNNs:</p>
<ul>
<li><strong>Sparse connectivity</strong>: CNNs focus on local patterns in data, particularly useful for spatial data like images. A single patch in feature map is connected to only a small patch of image (in MLPs there is dense/full connection).</li>
<li><strong>Parameter sharing</strong>: the same kernel/filter slides across the image. ie different neurons in each activation map is calculated using the same filter. In MLPs each neuron in the output space is calculated using different weight values. this makes it efficient for computation.</li>
<li><strong>Spatial hierarchy</strong>: CNNs build a hierarchy of increasingly abstract features. Lower layers detect simple features (e.g., edges), while deeper layers combine these to detect more complex patterns.</li>
<li><strong>Translation invariance</strong>: CNNs can recognize patterns regardless of their position in the input. This is because we are using filters that slide over patches of data, so information is processed in the same way for different patches of data This is crucial for tasks like object recognition in images.</li>
</ul>
<div id="fig-cnn-activation-maps" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cnn-activation-maps-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mindadeepam.github.io/posts/cnns/visualizing-activation-maps-cnns.png" style="width:90.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-cnn-activation-maps-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: visualizing activation maps in cnns. From the paper ‘Visualizing and Understanding Convolutional Networks’
</figcaption>
</figure>
</div>
<p>Have a look at <a href="https://arxiv.org/pdf/1311.2901">this</a> wonderful paper that dives deep into visualizing and understanding Cnns.</p>
</section>
<section id="lets-train-a-model-yaar" class="level2">
<h2 class="anchored" data-anchor-id="lets-train-a-model-yaar">Lets train a model yaar</h2>
<p>I’d be remiss if I let you finish here thinking that you got CNNs down. Just for old times sake, lets train a model to classify images from the fashion mnist dataset. The dataset contains very small grayscale (ie single channel) images of size (28*28).</p>
<blockquote class="blockquote">
<p>the below code is all generated by claude-sonnet-3.5, bcuz its kinda boring to train a toy model on a toy dataset, that too for classification. dont worry though, ill soon be back with a more interesting vision problem to get our hands dirty.</p>
</blockquote>
<p>Training itself is pretty straightforward. We split the data into train-test, and then train the model for a few epochs. We use the Adam optimizer and CrossEntropyLoss as the loss function. The outputs of the model are bare logits, which the loss functions accepts with targets. A learning rate of 0.001 is used for the optimizer. In the end we test on the test set, and print the accuracy.</p>
<div id="cell-23" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb13-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb13-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb13-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb13-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb13-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb13-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchsummary <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb13-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the CNN architecture</span></span>
<span id="cb13-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SimpleCNN(nn.Module):</span>
<span id="cb13-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(SimpleCNN, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb13-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input channels in layer1 is equal to number of input channels in the input image</span></span>
<span id="cb13-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb13-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb13-21"></span>
<span id="cb13-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb13-23">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(torch.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(x)))</span>
<span id="cb13-24">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(torch.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(x)))</span>
<span id="cb13-25">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(torch.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3(x)))</span>
<span id="cb13-26">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flattening the tensor to feed it to FC layer</span></span>
<span id="cb13-27">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(x))</span>
<span id="cb13-28">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(x)</span>
<span id="cb13-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span>
<span id="cb13-30"></span>
<span id="cb13-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set device</span></span>
<span id="cb13-32">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_built() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb13-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-34"></span>
<span id="cb13-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load and preprocess the Fashion MNIST dataset (just plain old standardization)</span></span>
<span id="cb13-36">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([transforms.ToTensor(), transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,))])</span>
<span id="cb13-37"></span>
<span id="cb13-38">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.datasets.FashionMNIST(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb13-39">test_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.datasets.FashionMNIST(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb13-40"></span>
<span id="cb13-41">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-42">test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb13-43"></span>
<span id="cb13-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the model, loss function, and optimizer</span></span>
<span id="cb13-45">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleCNN()</span>
<span id="cb13-46"></span>
<span id="cb13-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize model summary</span></span>
<span id="cb13-48">summary(model, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb13-49"></span>
<span id="cb13-50">model.to(device)</span>
<span id="cb13-51"></span>
<span id="cb13-52">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb13-53">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb13-54"></span>
<span id="cb13-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb13-56">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb13-57">all_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-58"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb13-59">    model.train()</span>
<span id="cb13-60">    epoch_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch_idx, (data, targets) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(train_loader):</span>
<span id="cb13-62">        data, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), targets.to(device)</span>
<span id="cb13-63">        </span>
<span id="cb13-64">        optimizer.zero_grad()</span>
<span id="cb13-65">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data)</span>
<span id="cb13-66">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb13-67">        loss.backward()</span>
<span id="cb13-68">        optimizer.step()</span>
<span id="cb13-69">        epoch_losses.append(loss.item())</span>
<span id="cb13-70">    </span>
<span id="cb13-71">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">], Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(epoch_losses)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-72">    all_losses.extend(epoch_losses)</span>
<span id="cb13-73"></span>
<span id="cb13-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot train loss curve</span></span>
<span id="cb13-75">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb13-76">plt.plot(all_losses)</span>
<span id="cb13-77">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb13-78">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb13-79">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training Loss Curve'</span>)</span>
<span id="cb13-80">plt.show()</span>
<span id="cb13-81"></span>
<span id="cb13-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluation</span></span>
<span id="cb13-83">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb13-84">correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-85">total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-86"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb13-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb13-88">        data, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), targets.to(device)</span>
<span id="cb13-89">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data)</span>
<span id="cb13-90">        _, predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(outputs.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-91">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> targets.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-92">        correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> targets).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb13-93"></span>
<span id="cb13-94"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Test Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>device: mps
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 28, 28]             320
         MaxPool2d-2           [-1, 32, 14, 14]               0
            Conv2d-3           [-1, 64, 14, 14]          18,496
         MaxPool2d-4             [-1, 64, 7, 7]               0
            Conv2d-5             [-1, 32, 7, 7]          18,464
         MaxPool2d-6             [-1, 32, 3, 3]               0
            Linear-7                  [-1, 128]          36,992
            Linear-8                   [-1, 10]           1,290
================================================================
Total params: 75,562
Trainable params: 75,562
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.00
Forward/backward pass size (MB): 0.37
Params size (MB): 0.29
Estimated Total Size (MB): 0.67
----------------------------------------------------------------
Epoch [1/5], Loss: 0.5107
Epoch [2/5], Loss: 0.3174
Epoch [3/5], Loss: 0.2693
Epoch [4/5], Loss: 0.2401
Epoch [5/5], Loss: 0.2185</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mindadeepam.github.io/posts/cnns/00_cnn_basics_files/figure-html/cell-8-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Accuracy: 90.38%</code></pre>
</div>
</div>
<p>Neat!! Now let’s visualize some of the predictions.</p>
<div id="cell-25" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb16-2"></span>
<span id="cb16-3">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T-shirt/top'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Trouser'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pullover'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dress'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coat'</span>, </span>
<span id="cb16-4">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sandal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shirt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sneaker'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ankle boot'</span>]   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify using train_dataset.classes</span></span>
<span id="cb16-5"></span>
<span id="cb16-6">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb16-7">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb16-8">fig.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Predictions'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb16-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_dataset)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)):</span>
<span id="cb16-12">        image, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_dataset[idx]</span>
<span id="cb16-13">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(image.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb16-14">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb16-15">        </span>
<span id="cb16-16">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb16-17">        ax.imshow(image.squeeze(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb16-18">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb16-19">        ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Pred: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_names[predicted]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">True: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>class_names[label]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, </span>
<span id="cb16-20">                     color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> label <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb16-21"></span>
<span id="cb16-22">plt.tight_layout()</span>
<span id="cb16-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mindadeepam.github.io/posts/cnns/00_cnn_basics_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now let us visualize the confisuion matrix to exactly see how the model is doing.</p>
<div id="cell-27" class="cell" data-execution_count="30">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see the confusion matrix</span></span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> confusion_matrix</span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect predictions and true labels</span></span>
<span id="cb17-6">y_true, y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb17-7">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb17-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb17-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb17-10">        data, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), targets.to(device)</span>
<span id="cb17-11">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data)</span>
<span id="cb17-12">        _, predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(outputs.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-13">        y_true.extend(targets.cpu().numpy())</span>
<span id="cb17-14">        y_pred.extend(predicted.cpu().numpy())</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and plot confusion matrix</span></span>
<span id="cb17-17">cm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_true, y_pred)</span>
<span id="cb17-18">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb17-19">plt.imshow(cm, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nearest'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pastel1"</span>)</span>
<span id="cb17-20">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusion Matrix'</span>)</span>
<span id="cb17-21">plt.colorbar()</span>
<span id="cb17-22">tick_marks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb17-23">plt.xticks(tick_marks, class_names, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb17-24">plt.yticks(tick_marks, class_names)</span>
<span id="cb17-25">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb17-26">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True'</span>)</span>
<span id="cb17-27"></span>
<span id="cb17-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add text annotations</span></span>
<span id="cb17-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cm.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb17-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cm.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb17-31">        plt.text(j, i, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(cm[i, j]), ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>)</span>
<span id="cb17-32"></span>
<span id="cb17-33">plt.tight_layout()</span>
<span id="cb17-34">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mindadeepam.github.io/posts/cnns/00_cnn_basics_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see that the model is particularly confused in the “Tshirt” &amp; “Shirt” class (less than 70% accuracy) and most confident in “Trouser”, “Sneaker”, “Bag” and “Ankle boot” (greater than 95% accuracy)</p>
</section>
<section id="concluding" class="level2">
<h2 class="anchored" data-anchor-id="concluding">Concluding</h2>
<p>I hope you clearly understand the core CNN fundamental architecture. This is just the base that’ll act as a foundation for more interesting architectures as we go on. Until then, see you in the next one!</p>
<p>Byeee :)</p>
</section>
<section id="references-and-further-reading" class="level2">
<h2 class="anchored" data-anchor-id="references-and-further-reading">References and Further Reading</h2>
<ul>
<li>sebastian raschka course material <a href="https://sebastianraschka.com/blog/2021/dl-course.html#l13-introduction-to-convolutional-neural-networks">here</a></li>
<li>CS231N Cnn notes <a href="https://cs231n.github.io/convolutional-networks/#case">here</a>. Great intuition and more detail about the shapes, local connectivity, spatial arrangement, and loads of other stuff.</li>
<li>beginner friendly article on Medium (its a great blog-series for ML) <a href="https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721">here</a></li>
<li>Visualizing and Understanding Convolutional Networks. 2014 paper <a href="https://arxiv.org/pdf/1311.2901">here</a></li>
<li>Find out some of the modifications made on this basic architecture. This is recommended further reading. <a href="https://towardsdatascience.com/10-papers-you-should-read-to-understand-image-classification-in-the-deep-learning-era-4b9d792f45a7">here</a></li>
</ul>


</section>

 ]]></description>
  <category>cnns</category>
  <category>deep-learning</category>
  <guid>https://mindadeepam.github.io/posts/cnns/00_cnn_basics.html</guid>
  <pubDate>Mon, 29 Jul 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Language Modelling with RNNs</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://mindadeepam.github.io/posts/rnns/01_rnns_basics.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The only reason you would be hearing RNNs right now is probably when <a href="https://arxiv.org/pdf/2405.04517">xLSTMs</a> were released in May, 2024. Apart from this they have pretty much taken a back seat to watch transformers revolutionalize NLP and the entire field of AI in general.</p>
<p>But one would do well to remember how we got here, and RNNs played a massive role in bringing us here. So in this blog post I’m going to build a small RNN model and we’ll try to train it to generate text.</p>
</section>
<section id="import-data-and-process-it" class="level1">
<h1>Import data and process it</h1>
<div id="cell-4" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
</div>
<p>Let us load a text dataset. I downloaded a few mystery books and concatenated their raw text to make the dataset. Follow <a href="https://github.com/mindadeepam/mindadeepam.github.io/blob/posts/posts/rnns/corpus.txt">this</a> link to get the text file.</p>
<div id="cell-6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/deepamminda/Downloads/corpus.txt"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dataset_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-4">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the size of data: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> characters"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>the size of data: 3062155 characters</code></pre>
</div>
</div>
<p>Lets have a look at some of the text we have.</p>
<div id="cell-8" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sample data chunk:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Sample data chunk:
'n one of his own high-power lenses, would not
be more disturbing than a strong emotion in a nature such as his. And
yet there was but one woman to him, and that woman was the late Irene
Adler, of dubious and questionable memory.

I had seen little of Holmes lately. My marriage had drifted us away
from each other. My own complete happiness, and the home-centred
interests which rise up around the man who first finds himself master
of his own establishment, were sufficient to absorb all my attention,
while Holmes, who loathed every form of society with his whole Bohemian
soul, remained in our lodgings in Baker Street, buried among his old
books, and alternating from week to week between cocaine and ambition,
the drowsiness of the drug, and the fierce energy of his own keen
nature. He was still, as ever, deeply attracted by the study of crime,
and occupied his immense faculties and extraordinary powers of
observation in following out those clues, and clearing up those
mysteries which had b'</code></pre>
</div>
</div>
<p>Lets split the data into train and test (80-20)</p>
<div id="cell-10" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb6-2">train_data, test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[:train_size], data[train_size:]</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  (in number of tokens)"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>train_size: 2449724, test_size: 612431  (in number of tokens)</code></pre>
</div>
</div>
<p>Now let us encode the text to numerical data that our model can understand. Encoding the data generally means tokenization and then encoding. To keep it super simple, we’ll just use individual characters as tokens.</p>
<p>Nowadays however, subword <a href="(https://huggingface.co/docs/transformers/main/en/tokenizer_summary)">tokenization algorithms</a> like Byte-Pair Encoding are the norm. But let us not get caught up in those for now.</p>
<div id="cell-12" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the vocabulary and special tokens</span></span>
<span id="cb8-2">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(train_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12345678910qwertyuioplkjhgfdsamnbvcxz~!@#$%^&amp;*()_+`-=[];'./,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:?&gt;&lt;\|"</span>))</span>
<span id="cb8-3">PAD_TOKEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;pad&gt;'</span></span>
<span id="cb8-4">special_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [PAD_TOKEN]</span>
<span id="cb8-5">MAX_SEQ_LEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb8-6"></span>
<span id="cb8-7">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>special_tokens, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>vocab]</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create mappings for encoding and decoding</span></span>
<span id="cb8-10">decode_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vocab))</span>
<span id="cb8-11">encode_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v:k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> decode_mapping.items()}</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define encoding and decoding functions</span></span>
<span id="cb8-14">encode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> text: [encode_mapping[char] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> text]</span>
<span id="cb8-15">decode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> text: [decode_mapping[char] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> char <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> text]</span></code></pre></div>
</div>
<p>Now we can do a simple sanity check by encoding a text and decoding it. we should get the original string back.</p>
<div id="cell-14" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hey there"</span></span>
<span id="cb9-2">encoded_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode(text)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"original text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tokenized text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'encoded text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>encoded_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"decoded back:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>decode(encoded_text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>original text: hey there
tokenized text: ['h', 'e', 'y', ' ', 't', 'h', 'e', 'r', 'e']
encoded text: [104, 81, 106, 37, 89, 104, 81, 8, 81]
decoded back:['h', 'e', 'y', ' ', 't', 'h', 'e', 'r', 'e']</code></pre>
</div>
</div>
<p>Now we need functions that will do this for batches of texts rather than single text. When dealing with batches, there are a few extra considerations: - You would typically want your batches to contain texts which are of same length, so that matrix/tensor operations can be performed. Hence we need to truncate longer sentences and pad shorter sentences to a fixed length.</p>
<p>For simplicity let us also define a function that will fetch us a random batch of data from our training set.</p>
<div id="cell-18" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_data(data, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Retrieves input and target data for training a recurrent neural network (RNN).</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        data (list): The input data.</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        batch_size (int, optional): The number of sequences in each batch. Defaults to 16.</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        seq_len (int, optional): The length of each sequence. Defaults to 256.</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the input and target data tensors.</span></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - inputs (torch.Tensor): The input data tensor.</span></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - targets (torch.Tensor): The target data tensor.</span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb11-16">    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span>
<span id="cb11-17">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size)</span>
<span id="cb11-18">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len</span>
<span id="cb11-19">    texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [data[s:e] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s, e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(start, end)]</span>
<span id="cb11-20">    </span>
<span id="cb11-21">    encoded_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode_arr(texts, max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-22">    targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_texts[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb11-23">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_texts[:, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb11-24">    </span>
<span id="cb11-25">    targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(targets, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb11-26">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(inputs, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb11-27">    </span>
<span id="cb11-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inputs, targets</span>
<span id="cb11-29"></span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target is just x shifted one token to the left!"</span>)</span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x[0]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">y[0] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>target is just x shifted one token to the left!
x[0]: tensor([  0,  81,   8, 112,  37,  49,  21,  37,  31,  37,  47,  31,  79,  37,
        100, 104,  49,  37,  97,  96,  37,  96,  89]),
y[0] tensor([ 81,   8, 112,  37,  49,  21,  37,  31,  37,  47,  31,  79,  37, 100,
        104,  49,  37,  97,  96,  37,  96,  89,   8])</code></pre>
</div>
</div>
</section>
<section id="rnns" class="level1">
<h1>RNNs</h1>
<p>Now before modelling, let us look at a RNN layer and understand its input and outputs. Each RNN layer has the following basic archtecture:</p>
<div id="fig-unrolled-rnn" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-unrolled-rnn-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://mindadeepam.github.io/posts/rnns/rnn_unrolled.png" style="width:70.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-unrolled-rnn-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: unrolled RNN
</figcaption>
</figure>
</div>
<section id="understanding-rnns" class="level2">
<h2 class="anchored" data-anchor-id="understanding-rnns">Understanding RNNs</h2>
<p>RNNs have 2 matrices, one (<img src="https://latex.codecogs.com/png.latex?W_%7Bxh%7D">) that maps input tokens to hidden_vector size and another (<img src="https://latex.codecogs.com/png.latex?W_%7Bhh%7D">) that maps from hidden_vector to hidden_vector. You’ll see how these are used in a minute.</p>
<p>Let us first look at input-output shapes for an RNN layer. We initially had a batch of text-tokens. Lets assume batch size of 4 and max_seq_len of 32. Hence the shape of input is (4,32).</p>
<p>Now for each token, we encode it to a number and then map it to a vector (which we generally call an embedding). Hence each token is now represented by a vector of fixed-shape, and lets call this embedding_dimension and set it to 10. (This can also be done by classical methods like one-hot encoding, ngram-models)</p>
<p>The shape of our input batch is now (batch_size, max_seq_len, emb_dim), ie (4,32,10).</p>
<p>Now let us peek into the matrix multiplications inside a RNN layer. Firstly, lets us recall that for a linear layer, this is the matrix equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?z%20(N,%20n_%7Bout%7D)%20=%20%5Csigma(x%20(N,%20n_%7Bin%7D)%20*%20W_x%5ET%20(n_%7Bin%7D,%20n_%7Bout%7D)%20+%20b%20(N))"></p>
<p>where ,</p>
<ul>
<li>input-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bin%7D"></li>
<li>output-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bout%7D"></li>
<li>batch-size = <img src="https://latex.codecogs.com/png.latex?N"></li>
</ul>
<p>In a linear layer, each token/feature is attended to by a different weight in the weight matrix and no information is shared among the sequence tokens. But when processing “sequences” we obviously want the model to remember stuff from previous tokens for the current token, right?</p>
<p>Hence RNNs maintain a hidden_vector for each token, that takes as input the current token and the hidden_vector from the previous token’s output.</p>
<p>So for the <img src="https://latex.codecogs.com/png.latex?t">’th token,</p>
<p><img src="https://latex.codecogs.com/png.latex?h_t%20(N,%20h)=%20x_t%20(N,%20n_%7Bin%7D)%20*%20W_%7Bxh%7D%5ET%20(n_%7Bin%7D,%20h)%20+%20h_%7Bt-1%7D%20(N,%20h)%20*%20W_%7Bhh%7D%5ET%20(h,%20h)%20+%20biases"></p>
<p>where</p>
<ul>
<li>input-features = <img src="https://latex.codecogs.com/png.latex?n_%7Bin%7D"></li>
<li>hidden-size = <img src="https://latex.codecogs.com/png.latex?h"></li>
<li>batch-size = <img src="https://latex.codecogs.com/png.latex?N"></li>
<li>sequence-length = <img src="https://latex.codecogs.com/png.latex?s"></li>
</ul>
<p>As you’ll notice since each token depends on previous tokens output, we cannot process this parallelly and have to iteratively calculate the output for each token. Also note we generally refer to the different tokens in a sequence as different timesteps, ie token at timestep t is <img src="https://latex.codecogs.com/png.latex?x_t">.</p>
<p>Hence for a complete batch, inputs are:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?X"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20n_%7Bin%7D)"></li>
<li><img src="https://latex.codecogs.com/png.latex?h_0"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20h)"> (this is optional, if not given most libraries will initiate a <img src="https://latex.codecogs.com/png.latex?h_0"> of all zeros or random numbers)</li>
</ul>
<p>And outputs are:</p>
<ul>
<li>hidden states of all timesteps, ie <img src="https://latex.codecogs.com/png.latex?H"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20h)"></li>
<li>last_hidden_state ie <img src="https://latex.codecogs.com/png.latex?h_n"> of shape <img src="https://latex.codecogs.com/png.latex?(N,%20h)"></li>
</ul>
<p>Note: sometimes you will see outputs of rnn fed into a linear layer like so,</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">outputs, h_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(x)</span>
<span id="cb14-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc(outputs[:,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:])</span></code></pre></div>
<p>Here <code>h_n</code> and <code>outputs[:,-1,:]</code> are the same thing. They both represent the last hidden state for the entire batch. (to make shapes equal use <code>h_n.squeeze()</code>)</p>
<p>Lets verify the above by passing inputs to an rnn layer.</p>
<div id="cell-22" class="cell" data-execution_count="19">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">emb_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb15-2">hidden_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb15-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb15-4">max_seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"batch_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, hidden_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hidden_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, max_seq_len: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_seq_len<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, emb_dim: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>emb_dim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-7">X,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_seq_len, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size)</span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"shape of initial input -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10">emb_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(num_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab), embedding_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb_dim)</span>
<span id="cb15-11">rnn_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.RNN(input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb_dim, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hidden_size, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bidirectional<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-12"></span>
<span id="cb15-13">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb_layer(X)</span>
<span id="cb15-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"post embedding; shape of input to RNN layer -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-15">h_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, batch_size, hidden_size)</span>
<span id="cb15-16">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnn_layer(X, h_0)</span>
<span id="cb15-17"></span>
<span id="cb15-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"RNN output shapes -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>[outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].shape <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>batch_size: 8, hidden_size: 128, max_seq_len: 32, emb_dim: 128
shape of initial input -&gt; torch.Size([8, 32])
post embedding; shape of input to RNN layer -&gt; torch.Size([8, 32, 128])
RNN output shapes -&gt; torch.Size([8, 32, 128]), [torch.Size([8, 128])]</code></pre>
</div>
</div>
</section>
</section>
<section id="language-modelling" class="level1">
<h1>Language Modelling</h1>
<p>Now let us build a model and train it. For starters we’ll just use a <a href="https://pytorch.org/docs/stable/generated/torch.nn.RNN.html#torch.nn.RNN">torch.nn.RNN</a> layer to build the model and train it. Once we get the entire training and testing pipeline complete, we can come back and build the model from scratch.</p>
<section id="how-exactly-can-we-generate-text-though" class="level3">
<h3 class="anchored" data-anchor-id="how-exactly-can-we-generate-text-though">How exactly can we generate text though?</h3>
<p>We know we can get hidden states of the entire sequence as outputs from a rnn layer, but each hidden state <img src="https://latex.codecogs.com/png.latex?h_t"> has ponly seen information till timestep <img src="https://latex.codecogs.com/png.latex?t">. What we can do is this:</p>
<ul>
<li>only use the last hidden state and feed it to a linear layer with output shape equal to size of vocabulary.</li>
<li>if softmax is applied on top of the linear layer’s output, it turns raw logits into the probabilities for different tokens in our vocab. This can be done outside the forward function too.</li>
</ul>
<p>Now each input sequence gives us one output token ie <img src="https://latex.codecogs.com/png.latex?y_%7Bt+1%7D">. then we can take the sequence from <img src="https://latex.codecogs.com/png.latex?1"> to <img src="https://latex.codecogs.com/png.latex?t+1"> and generate token <img src="https://latex.codecogs.com/png.latex?y_%7Bt+2%7D">.</p>
</section>
<section id="during-training" class="level3">
<h3 class="anchored" data-anchor-id="during-training">During Training</h3>
<p>To maximize training we can use all hidden state outputs instead of the last one. Because why wouldnt we want the model to learn from all its outputs!</p>
<ul>
<li>output of rnn layer of shape <img src="https://latex.codecogs.com/png.latex?(N,%20s,%20h)"> is fed into a linear layer of shape <img src="https://latex.codecogs.com/png.latex?(h,%20vocab%5C_size)"> to get <img src="https://latex.codecogs.com/png.latex?(N,s,vocab%5C_size)"> outputs. then we can pass them via softmax and apply cross-entropy loss on all of them and backpropagate through the model.</li>
<li>since at token level we now have <img src="https://latex.codecogs.com/png.latex?N*s"> tokens on which we will calculate loss, its simpler to flatten the targets and generated logits before passing to cross-entropy loss.</li>
</ul>
<p>Note: Had it been a classification task, we could just pass last hidden_state, <img src="https://latex.codecogs.com/png.latex?h_n"> to a linear layer with output size equal to number of classes.</p>
</section>
<section id="the-model" class="level2">
<h2 class="anchored" data-anchor-id="the-model">The model</h2>
<div id="cell-25" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate size of model parameters</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> count_parameters(model):</span>
<span id="cb17-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p.requires_grad)</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Rnn_model(nn.Module):</span>
<span id="cb17-6"></span>
<span id="cb17-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, embedding_size, max_seq_len, hidden_size, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vocab_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb17-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the Rnn_model class.</span></span>
<span id="cb17-10"></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            embedding_size (int): The size of the embedding dimension.</span></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            max_seq_len (int): The maximum sequence length.</span></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            hidden_size (int): The size of the hidden state dimension.</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            num_layers (int, optional): The number of recurrent layers. Defaults to 1.</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            vocab_size (int, optional): The size of the vocabulary. Defaults to None.</span></span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb17-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Rnn_model, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb17-20"></span>
<span id="cb17-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_seq_len</span>
<span id="cb17-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vocab_size <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> vocab_size</span>
<span id="cb17-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(num_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vocab_size, embedding_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embedding_size)</span>
<span id="cb17-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.LSTM(input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embedding_size, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hidden_size, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_layers)</span>
<span id="cb17-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_size, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab))</span>
<span id="cb17-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.softmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Softmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss(ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore pad token</span></span>
<span id="cb17-28"></span>
<span id="cb17-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb17-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" </span></span>
<span id="cb17-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a forward pas thorugh the model.</span></span>
<span id="cb17-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x: input torch tensor (B,T,S)</span></span>
<span id="cb17-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        targets: input targets (B,T,S)</span></span>
<span id="cb17-34"></span>
<span id="cb17-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb17-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        (model output logits, loss)</span></span>
<span id="cb17-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb17-38">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len:]</span>
<span id="cb17-39">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding(x)</span>
<span id="cb17-40">        H, h_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(x)</span>
<span id="cb17-41"></span>
<span id="cb17-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y = self.fc(H[:,-1,:])</span></span>
<span id="cb17-43">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc(H)</span>
<span id="cb17-44">        </span>
<span id="cb17-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb17-46">            B, T, V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.shape</span>
<span id="cb17-47">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion(y.view(B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>T, V), targets.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb17-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb17-49">        </span>
<span id="cb17-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y, loss</span>
<span id="cb17-51">    </span>
<span id="cb17-52">    </span>
<span id="cb17-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@torch.no_grad</span></span>
<span id="cb17-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_text, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>):</span>
<span id="cb17-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" </span></span>
<span id="cb17-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        input_text: a string or list of strings to generate text using the model.</span></span>
<span id="cb17-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_len: model will generate maximum of max_len tokens.</span></span>
<span id="cb17-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb17-59">        </span>
<span id="cb17-60">        encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(encode_arr([input_text], max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>))</span>
<span id="cb17-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> encoded_tokens.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb17-62">            encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_tokens.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb17-63"></span>
<span id="cb17-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.to(device)</span>
<span id="cb17-65">        encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_tokens.to(device)</span>
<span id="cb17-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_len):</span>
<span id="cb17-67">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only keep the most recent seq_len sized numbers.</span></span>
<span id="cb17-68">            outputs, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>(encoded_tokens[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_seq_len:])</span>
<span id="cb17-69"></span>
<span id="cb17-70">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># last output token</span></span>
<span id="cb17-71">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :]</span>
<span id="cb17-72"></span>
<span id="cb17-73">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get pribabilities from logits</span></span>
<span id="cb17-74">            next_token_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.functional.softmax(outputs, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-75"></span>
<span id="cb17-76">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample indices from it using a multinomial distribution</span></span>
<span id="cb17-77">            next_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(next_token_probs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-78"></span>
<span id="cb17-79">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concat prediction to original text</span></span>
<span id="cb17-80">            encoded_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat((encoded_tokens, next_tokens), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-81"></span>
<span id="cb17-82">        decoded_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decode_arr(encoded_tokens)</span>
<span id="cb17-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(decoded_texts)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb17-84">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> decoded_texts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#.replace("&lt;pad&gt;", "") </span></span>
<span id="cb17-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb17-86">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return [text.replace("&lt;pad&gt;", "") for text in decoded_texts]</span></span>
<span id="cb17-87">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> decoded_texts</span></code></pre></div>
</div>
</section>
<section id="training-loop" class="level2">
<h2 class="anchored" data-anchor-id="training-loop">Training loop</h2>
<p>Now I’ll define a basic training loop to train this model, and we’ll generate text every 1k steps to see the model learn right before us! Im also using tensorboard to log and view my runs. IMO its the best way to visualize loss curves and debug model behavior.</p>
<div id="cell-27" class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.tensorboard <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SummaryWriter</span>
<span id="cb18-2">writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SummaryWriter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./runs/with_gradients/'</span>)</span>
<span id="cb18-3"></span>
<span id="cb18-4">NUM_STEPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb18-5">MAX_SEQ_LEN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb18-6">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb18-7">EMBEDDING_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb18-8">HIDDEN_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb18-9">NUM_LAYERS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-10">LR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> </span>
<span id="cb18-11">LOG_EVERY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb18-12">GENERATE_EVERY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb18-13"></span>
<span id="cb18-14">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_built() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb18-15"></span>
<span id="cb18-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Rnn_model(embedding_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>EMBEDDING_SIZE, max_seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MAX_SEQ_LEN, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HIDDEN_SIZE, num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NUM_LAYERS)</span>
<span id="cb18-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"paramter count of the model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count_parameters(model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, data_size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-18">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LR)</span>
<span id="cb18-19">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_STEPS)):</span>
<span id="cb18-21">    optimizer.zero_grad()</span>
<span id="cb18-22">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(train_data, BATCH_SIZE, MAX_SEQ_LEN)</span>
<span id="cb18-23">    </span>
<span id="cb18-24">    model.to(device)</span>
<span id="cb18-25">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.to(device), y.to(device)</span>
<span id="cb18-26">    outputs, loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x, y)</span>
<span id="cb18-27">    loss.backward()</span>
<span id="cb18-28"></span>
<span id="cb18-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clip gradients</span></span>
<span id="cb18-30">    torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb18-31"></span>
<span id="cb18-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log gradients before the optimization step</span></span>
<span id="cb18-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, param <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.named_parameters():</span>
<span id="cb18-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> param.grad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb18-35">            writer.add_histogram(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'gradients/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, param.grad, i)</span>
<span id="cb18-36"></span>
<span id="cb18-37">    optimizer.step()</span>
<span id="cb18-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>LOG_EVERY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb18-39">        losses.append(loss)</span>
<span id="cb18-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(loss.item())</span></span>
<span id="cb18-41">    </span>
<span id="cb18-42">    writer.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss/train'</span>, loss.item(), i)</span>
<span id="cb18-43"></span>
<span id="cb18-44">    </span>
<span id="cb18-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>GENERATE_EVERY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>NUM_STEPS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb18-46">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> steps: "</span>)</span>
<span id="cb18-47">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'but I told him clearly, that if'</span></span>
<span id="cb18-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prompt is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-49">        gen_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.generate(prompt, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb18-50">        gen_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_text.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;pad&gt;"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb18-51">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">text generated by model: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gen_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-52">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb18-53">        </span>
<span id="cb18-54"></span>
<span id="cb18-55">writer.close()</span>
<span id="cb18-56"></span>
<span id="cb18-57">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [loss.cpu().detach().numpy().item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> losses] </span>
<span id="cb18-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(losses[::3])</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>paramter count of the model: 1114232, data_size: 2449724

after 0 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that ifâDaL—WX2m‘;D3æJqèup½’VDnJi^Rjje(lSïVcCrgWmMQSXA9W9`_Fî+E5l&amp;1sVq\6]=^fê—&gt;804àâ!yñêI・y=6&amp;l,{$Oû.1—u*$9‘KM!Oñ-cW’MéñhB~M.j6r{}xl

---------------------------------------------------------------------------
after 1000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if
Twen tracked of him grivel-napregred whotain one come,
in hy midge withoush, which shoulquould before so speeded the feet in th

---------------------------------------------------------------------------
after 2000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if still come, but I don’t know. Mc! So yester I shall five onnestible, “that peired, want and
asfected to his harded has
Farching

---------------------------------------------------------------------------
after 3000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that ifner, for sheep there indobless.
And Holmes
when we start the once.”

“Thanks between rouse vrisings of as one of
firied presing,

---------------------------------------------------------------------------
after 4000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if you had a explain and after we like it. He is every are that the main that in a valued her this example in our myselture for th

---------------------------------------------------------------------------
after 5000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if yim you have helpered befored. Therest name It
famousore, that he sat three
      it, and he said that we met him earsh back in

---------------------------------------------------------------------------
after 6000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if I can
started which he came many way heir imperiable takely room. A now,
      “What was only fancy,” he was a gentleman concei

---------------------------------------------------------------------------
after 7000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if your mistaken, and yet use_ the
Close of Baskerville, is obvious fashions and left your
brusticion of the longly seat from this

---------------------------------------------------------------------------
after 8000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if I’d fain the
others.”

“How made you, Watson, he was demilent? With past as another? One enemal with fift me out and was art vi

---------------------------------------------------------------------------
after 9000 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if I do follow made the owns
behind these common understand that is I, and they may not cast
occurred to suggest we idea?”

“Not r

---------------------------------------------------------------------------
after 9999 steps: 
prompt is: but I told him clearly, that if

text generated by model: 
but I told him clearly, that if if I was able faintled back in the hand, air which had
dirmanscoctors way. That’s close.

“Does_ gone. I recond feare, and that

---------------------------------------------------------------------------
[4.787812232971191, 1.8653450012207031, 1.7018814086914062, 1.655837059020996, 1.5209026336669922, 1.5495105981826782, 1.5696816444396973, 1.560757040977478, 1.5683640241622925, 1.4509146213531494, 1.4306949377059937, 1.4603841304779053, 1.3696606159210205, 1.5044567584991455, 1.3786689043045044, 1.3815288543701172, 1.3697071075439453]</code></pre>
</div>
</div>
<div id="cell-28" class="cell" data-execution_count="73">
<details class="code-fold">
<summary>show code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot losses</span></span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb20-3"></span>
<span id="cb20-4">plt.plot(losses)</span>
<span id="cb20-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Loss"</span>)</span>
<span id="cb20-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Steps"</span>)</span>
<span id="cb20-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="73">
<pre><code>Text(0, 0.5, 'Loss')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://mindadeepam.github.io/posts/rnns/01_rnns_basics_files/figure-html/cell-15-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The results certainly improve over the iterations, and its clearly visible that the model is learning to generate text. By scaling the model and training for longer, we can get better results.</p>
<p>Thank you for reading this and I hope you found it useful. The next time I update this blog post, I’ll be adding the following:</p>
<ul>
<li>Evaluation on test set (metrics like perplexity).</li>
<li>Implementing RNN, LSTM and GRU from scratch.</li>
</ul>
<p>Byee :)</p>
<!---
- sqitching from SGD to adam instantly gives boost (2.8 vs under 2)
- tripling the data gave no gains on 50k basic rnn model!
- 300k characters seems enough to generate coherent text, why not happening here?
    - lets try a few things, take small corpus (2-3mil chars), <1 million param model and use techiques like grad-clipping, mps on mac local(faster), and see if we can get it to generate coherent text.
    - mps reduces training-time by more than half.
    - grad clipping doesnt seem to affect quality on inspection of generated text.

- logging to tensorboard to keep track of experiments and to visualize gradients too. (X-ray vision)
-->
<!---
#### 100k rnn model - 3million chars: ~1.5 loss, kinda starts to form words
outputs:
1. hey there handsome what death which are a discroose.”
2. I recall went small-boy’s Louded spoke. T


#### 100k rnn model - 12million chars: ~1.6 loss, similar 
1. hey there handsome what
to on?”

Midams: I lady of
quiked in her put intented to the burgent wonder the risons of the saw
      four spikely. To belled
2. I recall Katerinoad and sure
conforty, unsole only geitute and, and it stigged refundled as a
  was abserved. Every tran at you.”

THO"Ci

#### 330k lstm model - 12million chars: ~ 1.52 loss, 
1. hey there handsome what?” are that indid of nebvense of the Samiskamen theory instance Loins, fry committed, or suggested fagreedingly.

Judge Stannaph
2. I recall are that any quality shall, as the man
been unknight, in his
closkered. The common as though sad so'll he had she askoccite
    
#### 1million lstm model - 3million chars: ~1.4 loss, 10k steps 
paramter count of the model: 1114232, 3million chars  

text generated by model after 0 steps of training but I told him clearly, that ifVOS£QY^DêX£véF LD[sœPyZê$t½’sXz<nf#t0|%çIw<à’"n・ê+r^êi?\fZâEl@K
Yu%@3VâZJ}_}$B` àl・à$rï:hàNBbZ0j½~6#û8vàC/[Vn$KRéüylyhê|.ûî&EJ2I


text generated by model after 1000 steps of training but I told him clearly, that if the bet’s of the
      yecraiuply that deen-tated for langent
pasts with! I was a tedeter.”
       I at, encurned. A, my dook a


text generated by model after 2000 steps of training but I told him clearly, that if he reabsa deed some
seard us a heard his nevriept took’h myself and come against is need of Eaker, and terrised a clearly enoye


text generated by model after 3000 steps of training but I told him clearly, that if Right
then, who roronian had monting that I must settating you passion. Fut us contain him thion. Amy taken
and to sympent-litt


text generated by model after 4000 steps of training but I told him clearly, that if ears whet a
your smalls friend
      so.”

“And you? Scotling us in the ensetate on the stappered. “A stors, but which I work w


text generated by model after 5000 steps of training but I told him clearly, that if be whose give anches was for me to his many
wears the anyone? The back down of brought than answered, sir; “Sudden horror and c


text generated by model after 6000 steps of training but I told him clearly, that if he had telegreas.”

“Why I knew I have been examed.”

“Certails, he spetter lodge oppon the next opportmend in I. I skined it, 


text generated by model after 7000 steps of training but I told him clearly, that if the Dark, sharp_ and that
their repaudance with us a fearer with a largue down, “but the live night, Murch-Starter reading upon


text generated by model after 8000 steps of training but I told him clearly, that if you will
opens but I year?” said he. “That is near that shifted as into the canner life came.—This warning
friend that I had ca


text generated by model after 9000 steps of training but I told him clearly, that if I trauntion, that they are note too vellering keep of
their part, and there was help being upon us the whole was snicks when?”
-->
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li>OG blog by Karpathy <a href="https://karpathy.github.io/2015/05/21/rnn-effectiveness/">link</a></li>
<li>RNN torch documentation <a href="https://pytorch.org/docs/stable/generated/torch.nn.RNN.html#torch.nn.RNN">link</a></li>
<li>Karpathy 1hr lecture on recurennt networks <a href="https://www.youtube.com/watch?v=yCC09vCHzF8">link</a></li>
</ol>


</section>

 ]]></description>
  <category>rnns</category>
  <category>nlp</category>
  <category>seq-to-seq</category>
  <category>langauge-modelling</category>
  <guid>https://mindadeepam.github.io/posts/rnns/01_rnns_basics.html</guid>
  <pubDate>Fri, 19 Jul 2024 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Few Shot learning: Classify using few examples!</title>
  <dc:creator>Deepam Minda</dc:creator>
  <link>https://mindadeepam.github.io/posts/few-shot-learning/prototype_networks.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>If you aren’t already familiar with it, few-shot learning (FSL) is an exciting concept in machine learning that focuses on training models to make accurate predictions or classifications when provided with only a very limited amount of labeled data for each category or class. Unlike traditional machine learning approaches that often require substantial labeled datasets for training, few-shot learning aims to address scenarios where acquiring such extensive labeled data is impractical or costly.</p>
<p>In few-shot learning, the model is trained to generalize effectively from a small number of examples (or shots) per category, allowing it to make predictions for new, unseen data points with confidence. This capability is particularly valuable in situations where data is scarce, and manual annotation is labor-intensive or expensive. Refer to [1] for an in-depth survey in this field.</p>
<p>In this blog, I’m going to show you how to implement a basic few-shot classification technique for text.</p>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p>Before we begin, let us familiarize ourselves with the correct terminology.</p>
<p>What characterizes FSL is having only a few examples at hand, for unseen classes, during inference. So basically we are showing the model only a few examples of a class which it may or may not have encountered during its pre-training before we make predictions using that model.</p>
<p><strong>Support Set, 𝒮:</strong> The few annotated examples that we have, make up the support set, with which we may or may not update the model weights to make it generalize to the new classes.</p>
<p><strong>Query Set, 𝒬:</strong> The query set consists of our test set, i.e.&nbsp;the samples we want to classify using the base model and a support set.</p>
<p><strong>N-way K-shot learning scheme:</strong> This is a common phrase used in the FSL literature, which essentially describes the few-shot problem statement that a model will be dealing with. “N” is the number of classes we have at test time and “K” is the number of samples per class we have in our support set “𝒮”</p>
<p><strong>1-shot classification:</strong> When K=1, i.e.&nbsp;we have only one labeled sample available per class.</p>
<p><strong>0-shot classification:</strong> K=0, i.e.&nbsp;we do not have any labeled samples available during inference.</p>
<p>Let us have a look at an example.</p>
<div id="cell-2" class="cell" data-execution_count="46">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample set is 3-way, 3-shot.</span></span>
<span id="cb1-2">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camera'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'battery'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display'</span>]</span>
<span id="cb1-3"></span>
<span id="cb1-4">sample_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camera'</span>: [</span>
<span id="cb1-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'absolutely love this quality of my photos!!'</span>,</span>
<span id="cb1-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'it even gives great quality in dim lighting. fabulous!!'</span>,</span>
<span id="cb1-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'the camera should be much better for such a high price'</span></span>
<span id="cb1-9">    ],</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'battery'</span>: [</span>
<span id="cb1-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The battery life on this device is exceptional! It easily lasts me the entire day with heavy usage."</span>,</span>
<span id="cb1-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm a bit disappointed with the battery performance. It drains quite quickly, especially when using power-hungry apps."</span>,</span>
<span id="cb1-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The battery is decent, not too bad, not too good. It gets me through the day, but I was hoping for better longevity."</span></span>
<span id="cb1-14">    ],</span>
<span id="cb1-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display'</span>: [</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The display on this device is stunning! Colors are vivid, and the resolution is top-notch."</span>,</span>
<span id="cb1-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm not too impressed with the display quality. It seems a bit washed out, and the brightness could be better."</span>,</span>
<span id="cb1-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The display is okay, but nothing extraordinary. It gets the job done for everyday tasks."</span></span>
<span id="cb1-19">    ]</span>
<span id="cb1-20">}</span>
<span id="cb1-21"></span>
<span id="cb1-22">query_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"does it give good quality photos in the night?"</span>]</span></code></pre></div>
</details>
</div>
<p>Here we have a 3-way (there are 3 classes), 3-shot (3 examples for each class) setting.</p>
</section>
<section id="high-level-design" class="level2">
<h2 class="anchored" data-anchor-id="high-level-design">High level design</h2>
<p>Let us have a quick look at the architecture of the system.</p>
<div id="few-shot" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://mindadeepam.github.io/posts/few-shot-learning/1_few_shot_system.png" class="img-fluid figure-img"></p>
<figcaption>A simple few shot classification system</figcaption>
</figure>
</div>
<p>This is the flow of our solution:</p>
<p>The first step is to get an embedding module. That can be created using regular supervised learning (Resnets trained on Imagenet) or self-supervised learning (BERT and co). Then, we use the embedding module to get feature representations for our classes in the support set. A simple way to do this is to turn each class’s examples into embeddings and take the mean of those vectors. This then becomes our “prototype” vectors to compare against. Now for each query, we can take the embeddings of the query text and use cosine similarity to find the predicted class. This closely resembles This system basically allows us to leverage transfer learning to use large backbones as our embedding module. And there is also the advantage of not performing any gradient updates. This helps us maintain a much more dynamic and flexible system.</p>
<p>The idea of comparing query samples with the support set samples is inspired by metric learning. Refer to [3, 4] for better understanding.</p>
<p>Let’s implement this using the transformers library. You can find the implementation in this colab notebook.</p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>Let’s start with the good old BERT base model.</p>
<section id="import-libraries-and-download-model" class="level3">
<h3 class="anchored" data-anchor-id="import-libraries-and-download-model">1. Import libraries and download model</h3>
<div id="cell-4" class="cell" data-execution_count="47">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModel</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dict</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pprint <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pprint</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings </span>
<span id="cb2-7">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_available():</span>
<span id="cb2-10">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mps'</span>)</span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-12">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb2-13">    </span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the model and tokenizer</span></span>
<span id="cb2-15">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-uncased'</span>)</span>
<span id="cb2-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bert-base-uncased"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="tokenize-and-encode-a-sentence" class="level3">
<h3 class="anchored" data-anchor-id="tokenize-and-encode-a-sentence">2. Tokenize and encode a sentence</h3>
<div id="cell-6" class="cell" data-execution_count="71">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"He's such a great guy!!"</span></span>
<span id="cb3-2">encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb3-3">  text, </span>
<span id="cb3-4">  return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>, </span>
<span id="cb3-5">  padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>,     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True will pad to max-len in batch</span></span>
<span id="cb3-6">  max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"encoded input:"</span>)</span>
<span id="cb3-9">pprint(encoded_input)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>encoded input:
{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]]),
 'input_ids': tensor([[ 101, 2002, 1005, 1055, 2107, 1037, 2307, 3124,  999,  999,  102,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0]]),
 'token_type_ids': tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0]])}</code></pre>
</div>
</div>
<p>where,</p>
<ul>
<li>input_ids: token id of each token</li>
<li>token_type_id: When we pass two sentences for downstream fine-tuning in BERT, this is used to identify which token belongs to which sentence.</li>
<li>attention_mask: which tokens to ignore. As you’ll see, the padding tokens have been masked.</li>
</ul>
</section>
<section id="generate-embeddings-using-model" class="level3">
<h3 class="anchored" data-anchor-id="generate-embeddings-using-model">3. Generate embeddings using model</h3>
<p>The output has 2 parts, <code>cls_token_embeddings</code> and <code>last_hidden_states</code> of the tokens. We can either use the cls_embeddings to represent the sentence or pool the vectors in last_hidden_states. The pooling can be max/min/mean.</p>
<p>The dimension of the output will be equal to the embedding dimension of the model, i.e.&nbsp;784 in our case.</p>
<div id="cell-8" class="cell" data-execution_count="60">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_embeddings(model, tokenizer, text, pooling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>):</span>
<span id="cb5-2">  </span>
<span id="cb5-3">  encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(</span>
<span id="cb5-4">    text, </span>
<span id="cb5-5">    return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>, </span>
<span id="cb5-6">    padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>, </span>
<span id="cb5-7">    max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, </span>
<span id="cb5-8">    truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-9">  )</span>
<span id="cb5-10">  encoded_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoded_input.to(device)</span>
<span id="cb5-11"></span>
<span id="cb5-12">  model.to(device)</span>
<span id="cb5-13"></span>
<span id="cb5-14">  model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb5-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb5-16">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>encoded_input)</span>
<span id="cb5-17">    last_hidden_state, pooler_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-18">    </span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pooling<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cls'</span>:</span>
<span id="cb5-20">      embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pooler_output</span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-22">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore the pad tokens embeddings by multiplying with attention mask</span></span>
<span id="cb5-23">      last_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (last_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> encoded_input[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_mask'</span>].unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-24">      embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last_hidden_state.mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array(embedding.cpu())</span>
<span id="cb5-26"></span>
<span id="cb5-27"></span>
<span id="cb5-28">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hey there! how are you?'</span>)</span>
<span id="cb5-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"shape of embeddings: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>embeddings<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>shape of embeddings: (1, 768)</code></pre>
</div>
</div>
</section>
<section id="prepare-the-prototypes" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-prototypes">4. Prepare the prototypes:</h3>
<p>To prepare the class prototypes we’ll take the mean of the sentences for each class.</p>
<div id="cell-10" class="cell" data-execution_count="61">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_prototypes(model, tokenizer, sample_set: Dict):</span>
<span id="cb7-2">  prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-3">  sentence_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> category, sentences <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sample_set.items():</span>
<span id="cb7-5">    sentence_embeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, sentences)</span>
<span id="cb7-6">    sentence_embeddings[category] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_embeds</span>
<span id="cb7-7">    prototype_vectors[category] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sentence_embeddings[category], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prototype_vectors</span></code></pre></div>
</details>
</div>
</section>
<section id="classify" class="level3">
<h3 class="anchored" data-anchor-id="classify">5. Classify</h3>
<p>To classify a query text, we can run cosine similarity against the prototype vectors and return the argmax as the most probable class!</p>
<div id="cell-12" class="cell" data-execution_count="62">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> classify(model, tokenizer, text, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, sample_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb8-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-3">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> sample_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prototype vectors are not passed, either pass a sample set prototype vectors"</span></span>
<span id="cb8-4">      prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(sample_set)</span>
<span id="cb8-5"></span>
<span id="cb8-6">  query_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_embeddings(model, tokenizer, text)</span>
<span id="cb8-7">  </span>
<span id="cb8-8">  prototype_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(prototype_vectors.values()))</span>
<span id="cb8-9">  scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence_transformers.util.cos_sim(query_embeddings, prototype_matrix)</span>
<span id="cb8-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> scores</span></code></pre></div>
</details>
</div>
<p>Using the above-defined functions and the sample set from before, we have:</p>
<div id="cell-14" class="cell" data-execution_count="65">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(model, tokenizer, sample_set)</span>
<span id="cb9-2">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span></span>
<span id="cb9-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model, tokenizer, query_text, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.6121, 0.7127, 0.6388]])
the predicted class is battery</code></pre>
</div>
</div>
<p>A bit strange! Although the expected class is predicted, scores for other classes are also high. Let’s try a harder query.</p>
<div id="cell-16" class="cell" data-execution_count="66">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'does it give good quality photos in the night?'</span>]</span>
<span id="cb11-2">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model, tokenizer, query, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.7984, 0.7043, 0.7647]])
the predicted class is camera</code></pre>
</div>
</div>
<p>Although the highest similarity is for ‘camera’, the similarity should be much higher.</p>
<p>The results do not get better even if we try cls-pooling. This only means that the embeddings produced by the model do not give us an accurate representation of the sentence.</p>
<p>We would then do good to remember that BERT pre-train was trained by MaskedLM, NextSentencePrediction, hence the original purpose of BERT is not to create a meaningful embedding of the sentence but for some specific downstream task. In fact, as the authors of the sentence-transformer paper [2] point out, out-of-the-box Bert embeddings perform even worse than GLoVE representations!</p>
<blockquote class="blockquote">
<p>Jacob Devlin’s comment: I’m not sure what these vectors are, since BERT does not generate meaningful sentence vectors. It seems that this is is doing average pooling over the word tokens to get a sentence vector, but we never suggested that this will generate meaningful sentence representations. And even if they are decent representations when fed into a DNN trained for a downstream task, it doesn’t mean that they will be meaningful in terms of cosine distance. (Since cosine distance is a linear space where all dimensions are weighted equally).</p>
</blockquote>
<p>There are a few ways to improve the bert-base for sentence-level tasks and both involve finetuning the model with some data.</p>
<ul>
<li>adding a linear layer on top and fine-tuning it.</li>
<li>making embeddings better by contrastive learning.</li>
</ul>
</section>
</section>
<section id="using-sentence-transformers" class="level2">
<h2 class="anchored" data-anchor-id="using-sentence-transformers">Using sentence transformers</h2>
<p>Ultimately, what we need is a better embedding module. Luckily we have such models. As it turns out, contrastive learning is an excellent approach for tuning our models such that different sentences produce semantically different embeddings.</p>
<p>We will explore contrastive learning and its inner workings some other day, but for now, let’s pick up open-source models that have been finetuned using contrastive learning. There is an entire library (aka sentence-transformers) and paper[2] dedicated to this.</p>
<p>We’ll use the <code>sentence-transformers/stsb-bert-base</code> model for our purposes.</p>
<section id="import-packages-and-download-model" class="level3">
<h3 class="anchored" data-anchor-id="import-packages-and-download-model">1. Import packages and download model</h3>
<div id="cell-18" class="cell" data-execution_count="55">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load a sentence transformer model</span></span>
<span id="cb13-4">sts_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence-transformers/stsb-bert-base'</span>)</span>
<span id="cb13-5">model2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sts_model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].auto_model.to(device)</span>
<span id="cb13-6">tokenizer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sts_model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tokenizer</span></code></pre></div>
</details>
</div>
</section>
<section id="use-the-above-defined-functions-to-prepare-prototype-vectors-and-classify-them-in-a-few-shot-setting" class="level3">
<h3 class="anchored" data-anchor-id="use-the-above-defined-functions-to-prepare-prototype-vectors-and-classify-them-in-a-few-shot-setting">2. Use the above-defined functions to prepare prototype vectors and classify them in a few-shot setting</h3>
<div id="cell-20" class="cell" data-execution_count="67">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">prototype_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prototypes(model2, tokenizer2, sample_set)</span>
<span id="cb14-2">query_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i hate the batteries"</span></span>
<span id="cb14-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model2, tokenizer2, query_text, prototype_vectors)</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.0910, 0.4780, 0.1606]])
the predicted class is battery</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="68">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'does it give good quality photos in the night?'</span>]</span>
<span id="cb16-3">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classify(model2, tokenizer2, query, prototype_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prototype_vectors)</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"output: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"the predicted class is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classes[output.argmax().item()]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>output: tensor([[0.4467, 0.1012, 0.2998]])
the predicted class is camera</code></pre>
</div>
</div>
<p>As we can see, the scores seem much more reasonable this time around. There is a much better correlation with the ground truth labels. Using better base models trained in multiple tasks further improves the performance of these models.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This brings us to the end of this blog. In summary, we explored the realm of few-shot learning, a machine-learning approach tailored for accurate predictions with limited labeled data. Initially, we employed BERT, but its design didn’t align with our objectives. Instead, we leveraged a model fine-tuned for sentence-level tasks, <code>sentence-transformers/stsb-bert-base</code>, which significantly improved our results.</p>
<p><strong>These are a few things to note:</strong></p>
<p>Although we directly used pre-trained models here, an interesting undertaking would be to perform the contrastive fine-tuning ourselves. Also, instead of using cosine similarity, we can train lightweight classifiers on top of our embedding module for better performance.</p>
<p>That’ll be all from my side. Until next time, Happy Reading!</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>[1] <a href="https://arxiv.org/pdf/1904.05046.pdf">Survey paper on few-shot learning</a></p>
<p>[2] <a href="https://arxiv.org/pdf/1908.10084.pdf">Sentence-Bert paper</a></p>
<p>[3] <a href="https://proceedings.neurips.cc/paper_files/paper/2017/file/cb8da6767461f2812ae4290eac7cbc42-Paper.pdf">Prototypical Networks</a></p>
<p>[4] <a href="https://lilianweng.github.io/posts/2018-11-30-meta-learning/#metric-based">Excellent much more techincal blog by Lilian Weng</a></p>


</section>

 ]]></description>
  <category>classification</category>
  <category>few-shot learning</category>
  <category>nlp</category>
  <guid>https://mindadeepam.github.io/posts/few-shot-learning/prototype_networks.html</guid>
  <pubDate>Mon, 11 Sep 2023 18:30:00 GMT</pubDate>
  <media:content url="https://mindadeepam.github.io/posts/few-shot-learning/cover.jpeg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
